// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: recovery.proto
// Protobuf C++ Version: 5.26.1

#ifndef GOOGLE_PROTOBUF_INCLUDED_recovery_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_recovery_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION != 5026001
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_bases.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_recovery_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_recovery_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_recovery_2eproto;
namespace recovery {
class CheckpointChunkResponse;
struct CheckpointChunkResponseDefaultTypeInternal;
extern CheckpointChunkResponseDefaultTypeInternal _CheckpointChunkResponse_default_instance_;
class CheckpointFilesRequest;
struct CheckpointFilesRequestDefaultTypeInternal;
extern CheckpointFilesRequestDefaultTypeInternal _CheckpointFilesRequest_default_instance_;
class CheckpointFilesResponse;
struct CheckpointFilesResponseDefaultTypeInternal;
extern CheckpointFilesResponseDefaultTypeInternal _CheckpointFilesResponse_default_instance_;
class FileChunk;
struct FileChunkDefaultTypeInternal;
extern FileChunkDefaultTypeInternal _FileChunk_default_instance_;
class GetLogFilesRequest;
struct GetLogFilesRequestDefaultTypeInternal;
extern GetLogFilesRequestDefaultTypeInternal _GetLogFilesRequest_default_instance_;
class LogFiles;
struct LogFilesDefaultTypeInternal;
extern LogFilesDefaultTypeInternal _LogFiles_default_instance_;
class Log_File;
struct Log_FileDefaultTypeInternal;
extern Log_FileDefaultTypeInternal _Log_File_default_instance_;
class RecoveryCompleteRequest;
struct RecoveryCompleteRequestDefaultTypeInternal;
extern RecoveryCompleteRequestDefaultTypeInternal _RecoveryCompleteRequest_default_instance_;
class RecoveryCompleteResponse;
struct RecoveryCompleteResponseDefaultTypeInternal;
extern RecoveryCompleteResponseDefaultTypeInternal _RecoveryCompleteResponse_default_instance_;
class StartRecoveryRequest;
struct StartRecoveryRequestDefaultTypeInternal;
extern StartRecoveryRequestDefaultTypeInternal _StartRecoveryRequest_default_instance_;
class StartRecoveryResponse;
struct StartRecoveryResponseDefaultTypeInternal;
extern StartRecoveryResponseDefaultTypeInternal _StartRecoveryResponse_default_instance_;
}  // namespace recovery
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace recovery {
enum RecoveryType : int {
  LOGFILES = 0,
  CHECKPOINT_FILE = 1,
  UP_TO_DATE = 2,
  RecoveryType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  RecoveryType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool RecoveryType_IsValid(int value);
extern const uint32_t RecoveryType_internal_data_[];
constexpr RecoveryType RecoveryType_MIN = static_cast<RecoveryType>(0);
constexpr RecoveryType RecoveryType_MAX = static_cast<RecoveryType>(2);
constexpr int RecoveryType_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
RecoveryType_descriptor();
template <typename T>
const std::string& RecoveryType_Name(T value) {
  static_assert(std::is_same<T, RecoveryType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to RecoveryType_Name().");
  return RecoveryType_Name(static_cast<RecoveryType>(value));
}
template <>
inline const std::string& RecoveryType_Name(RecoveryType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<RecoveryType_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool RecoveryType_Parse(absl::string_view name, RecoveryType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RecoveryType>(
      RecoveryType_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class StartRecoveryResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:recovery.StartRecoveryResponse) */ {
 public:
  inline StartRecoveryResponse() : StartRecoveryResponse(nullptr) {}
  ~StartRecoveryResponse() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR StartRecoveryResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline StartRecoveryResponse(const StartRecoveryResponse& from) : StartRecoveryResponse(nullptr, from) {}
  inline StartRecoveryResponse(StartRecoveryResponse&& from) noexcept
      : StartRecoveryResponse(nullptr, std::move(from)) {}
  inline StartRecoveryResponse& operator=(const StartRecoveryResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartRecoveryResponse& operator=(StartRecoveryResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StartRecoveryResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const StartRecoveryResponse* internal_default_instance() {
    return reinterpret_cast<const StartRecoveryResponse*>(
        &_StartRecoveryResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(StartRecoveryResponse& a, StartRecoveryResponse& b) { a.Swap(&b); }
  inline void Swap(StartRecoveryResponse* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StartRecoveryResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StartRecoveryResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<StartRecoveryResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const StartRecoveryResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const StartRecoveryResponse& from) { StartRecoveryResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(StartRecoveryResponse* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "recovery.StartRecoveryResponse"; }

 protected:
  explicit StartRecoveryResponse(::google::protobuf::Arena* arena);
  StartRecoveryResponse(::google::protobuf::Arena* arena, const StartRecoveryResponse& from);
  StartRecoveryResponse(::google::protobuf::Arena* arena, StartRecoveryResponse&& from) noexcept
      : StartRecoveryResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTypeFieldNumber = 1,
  };
  // .recovery.RecoveryType type = 1;
  void clear_type() ;
  ::recovery::RecoveryType type() const;
  void set_type(::recovery::RecoveryType value);

  private:
  ::recovery::RecoveryType _internal_type() const;
  void _internal_set_type(::recovery::RecoveryType value);

  public:
  // @@protoc_insertion_point(class_scope:recovery.StartRecoveryResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    int type_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_recovery_2eproto;
};
// -------------------------------------------------------------------

class StartRecoveryRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:recovery.StartRecoveryRequest) */ {
 public:
  inline StartRecoveryRequest() : StartRecoveryRequest(nullptr) {}
  ~StartRecoveryRequest() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR StartRecoveryRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline StartRecoveryRequest(const StartRecoveryRequest& from) : StartRecoveryRequest(nullptr, from) {}
  inline StartRecoveryRequest(StartRecoveryRequest&& from) noexcept
      : StartRecoveryRequest(nullptr, std::move(from)) {}
  inline StartRecoveryRequest& operator=(const StartRecoveryRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartRecoveryRequest& operator=(StartRecoveryRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StartRecoveryRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const StartRecoveryRequest* internal_default_instance() {
    return reinterpret_cast<const StartRecoveryRequest*>(
        &_StartRecoveryRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(StartRecoveryRequest& a, StartRecoveryRequest& b) { a.Swap(&b); }
  inline void Swap(StartRecoveryRequest* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StartRecoveryRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StartRecoveryRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<StartRecoveryRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const StartRecoveryRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const StartRecoveryRequest& from) { StartRecoveryRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(StartRecoveryRequest* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "recovery.StartRecoveryRequest"; }

 protected:
  explicit StartRecoveryRequest(::google::protobuf::Arena* arena);
  StartRecoveryRequest(::google::protobuf::Arena* arena, const StartRecoveryRequest& from);
  StartRecoveryRequest(::google::protobuf::Arena* arena, StartRecoveryRequest&& from) noexcept
      : StartRecoveryRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kLogNumberFieldNumber = 2,
    kCheckpointVersionNumberFieldNumber = 1,
  };
  // repeated int64 log_number = 2;
  int log_number_size() const;
  private:
  int _internal_log_number_size() const;

  public:
  void clear_log_number() ;
  ::int64_t log_number(int index) const;
  void set_log_number(int index, ::int64_t value);
  void add_log_number(::int64_t value);
  const ::google::protobuf::RepeatedField<::int64_t>& log_number() const;
  ::google::protobuf::RepeatedField<::int64_t>* mutable_log_number();

  private:
  const ::google::protobuf::RepeatedField<::int64_t>& _internal_log_number() const;
  ::google::protobuf::RepeatedField<::int64_t>* _internal_mutable_log_number();

  public:
  // int64 checkpoint_version_number = 1;
  void clear_checkpoint_version_number() ;
  ::int64_t checkpoint_version_number() const;
  void set_checkpoint_version_number(::int64_t value);

  private:
  ::int64_t _internal_checkpoint_version_number() const;
  void _internal_set_checkpoint_version_number(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:recovery.StartRecoveryRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedField<::int64_t> log_number_;
    mutable ::google::protobuf::internal::CachedSize _log_number_cached_byte_size_;
    ::int64_t checkpoint_version_number_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_recovery_2eproto;
};
// -------------------------------------------------------------------

class RecoveryCompleteResponse final : public ::google::protobuf::internal::ZeroFieldsBase
/* @@protoc_insertion_point(class_definition:recovery.RecoveryCompleteResponse) */ {
 public:
  inline RecoveryCompleteResponse() : RecoveryCompleteResponse(nullptr) {}
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR RecoveryCompleteResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline RecoveryCompleteResponse(const RecoveryCompleteResponse& from) : RecoveryCompleteResponse(nullptr, from) {}
  inline RecoveryCompleteResponse(RecoveryCompleteResponse&& from) noexcept
      : RecoveryCompleteResponse(nullptr, std::move(from)) {}
  inline RecoveryCompleteResponse& operator=(const RecoveryCompleteResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RecoveryCompleteResponse& operator=(RecoveryCompleteResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RecoveryCompleteResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const RecoveryCompleteResponse* internal_default_instance() {
    return reinterpret_cast<const RecoveryCompleteResponse*>(
        &_RecoveryCompleteResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 10;
  friend void swap(RecoveryCompleteResponse& a, RecoveryCompleteResponse& b) { a.Swap(&b); }
  inline void Swap(RecoveryCompleteResponse* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RecoveryCompleteResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RecoveryCompleteResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::internal::ZeroFieldsBase::DefaultConstruct<RecoveryCompleteResponse>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const RecoveryCompleteResponse& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const RecoveryCompleteResponse& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }

  public:
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "recovery.RecoveryCompleteResponse"; }

 protected:
  explicit RecoveryCompleteResponse(::google::protobuf::Arena* arena);
  RecoveryCompleteResponse(::google::protobuf::Arena* arena, const RecoveryCompleteResponse& from);
  RecoveryCompleteResponse(::google::protobuf::Arena* arena, RecoveryCompleteResponse&& from) noexcept
      : RecoveryCompleteResponse(arena) {
    *this = ::std::move(from);
  }

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  // @@protoc_insertion_point(class_scope:recovery.RecoveryCompleteResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_recovery_2eproto;
};
// -------------------------------------------------------------------

class RecoveryCompleteRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:recovery.RecoveryCompleteRequest) */ {
 public:
  inline RecoveryCompleteRequest() : RecoveryCompleteRequest(nullptr) {}
  ~RecoveryCompleteRequest() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR RecoveryCompleteRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline RecoveryCompleteRequest(const RecoveryCompleteRequest& from) : RecoveryCompleteRequest(nullptr, from) {}
  inline RecoveryCompleteRequest(RecoveryCompleteRequest&& from) noexcept
      : RecoveryCompleteRequest(nullptr, std::move(from)) {}
  inline RecoveryCompleteRequest& operator=(const RecoveryCompleteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RecoveryCompleteRequest& operator=(RecoveryCompleteRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RecoveryCompleteRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RecoveryCompleteRequest* internal_default_instance() {
    return reinterpret_cast<const RecoveryCompleteRequest*>(
        &_RecoveryCompleteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 9;
  friend void swap(RecoveryCompleteRequest& a, RecoveryCompleteRequest& b) { a.Swap(&b); }
  inline void Swap(RecoveryCompleteRequest* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RecoveryCompleteRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RecoveryCompleteRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<RecoveryCompleteRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RecoveryCompleteRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const RecoveryCompleteRequest& from) { RecoveryCompleteRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(RecoveryCompleteRequest* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "recovery.RecoveryCompleteRequest"; }

 protected:
  explicit RecoveryCompleteRequest(::google::protobuf::Arena* arena);
  RecoveryCompleteRequest(::google::protobuf::Arena* arena, const RecoveryCompleteRequest& from);
  RecoveryCompleteRequest(::google::protobuf::Arena* arena, RecoveryCompleteRequest&& from) noexcept
      : RecoveryCompleteRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kAddressFieldNumber = 1,
  };
  // string address = 1;
  void clear_address() ;
  const std::string& address() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_address(Arg_&& arg, Args_... args);
  std::string* mutable_address();
  PROTOBUF_NODISCARD std::string* release_address();
  void set_allocated_address(std::string* value);

  private:
  const std::string& _internal_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address(
      const std::string& value);
  std::string* _internal_mutable_address();

  public:
  // @@protoc_insertion_point(class_scope:recovery.RecoveryCompleteRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      48, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr address_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_recovery_2eproto;
};
// -------------------------------------------------------------------

class Log_File final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:recovery.Log_File) */ {
 public:
  inline Log_File() : Log_File(nullptr) {}
  ~Log_File() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Log_File(
      ::google::protobuf::internal::ConstantInitialized);

  inline Log_File(const Log_File& from) : Log_File(nullptr, from) {}
  inline Log_File(Log_File&& from) noexcept
      : Log_File(nullptr, std::move(from)) {}
  inline Log_File& operator=(const Log_File& from) {
    CopyFrom(from);
    return *this;
  }
  inline Log_File& operator=(Log_File&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Log_File& default_instance() {
    return *internal_default_instance();
  }
  static inline const Log_File* internal_default_instance() {
    return reinterpret_cast<const Log_File*>(
        &_Log_File_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(Log_File& a, Log_File& b) { a.Swap(&b); }
  inline void Swap(Log_File* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Log_File* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Log_File* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Log_File>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Log_File& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Log_File& from) { Log_File::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Log_File* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "recovery.Log_File"; }

 protected:
  explicit Log_File(::google::protobuf::Arena* arena);
  Log_File(::google::protobuf::Arena* arena, const Log_File& from);
  Log_File(::google::protobuf::Arena* arena, Log_File&& from) noexcept
      : Log_File(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kContentFieldNumber = 1,
    kFileNameFieldNumber = 2,
  };
  // string content = 1;
  void clear_content() ;
  const std::string& content() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_content(Arg_&& arg, Args_... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* value);

  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(
      const std::string& value);
  std::string* _internal_mutable_content();

  public:
  // string file_name = 2;
  void clear_file_name() ;
  const std::string& file_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_file_name(Arg_&& arg, Args_... args);
  std::string* mutable_file_name();
  PROTOBUF_NODISCARD std::string* release_file_name();
  void set_allocated_file_name(std::string* value);

  private:
  const std::string& _internal_file_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file_name(
      const std::string& value);
  std::string* _internal_mutable_file_name();

  public:
  // @@protoc_insertion_point(class_scope:recovery.Log_File)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      42, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr content_;
    ::google::protobuf::internal::ArenaStringPtr file_name_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_recovery_2eproto;
};
// -------------------------------------------------------------------

class GetLogFilesRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:recovery.GetLogFilesRequest) */ {
 public:
  inline GetLogFilesRequest() : GetLogFilesRequest(nullptr) {}
  ~GetLogFilesRequest() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GetLogFilesRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline GetLogFilesRequest(const GetLogFilesRequest& from) : GetLogFilesRequest(nullptr, from) {}
  inline GetLogFilesRequest(GetLogFilesRequest&& from) noexcept
      : GetLogFilesRequest(nullptr, std::move(from)) {}
  inline GetLogFilesRequest& operator=(const GetLogFilesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetLogFilesRequest& operator=(GetLogFilesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetLogFilesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetLogFilesRequest* internal_default_instance() {
    return reinterpret_cast<const GetLogFilesRequest*>(
        &_GetLogFilesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(GetLogFilesRequest& a, GetLogFilesRequest& b) { a.Swap(&b); }
  inline void Swap(GetLogFilesRequest* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetLogFilesRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetLogFilesRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<GetLogFilesRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetLogFilesRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GetLogFilesRequest& from) { GetLogFilesRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GetLogFilesRequest* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "recovery.GetLogFilesRequest"; }

 protected:
  explicit GetLogFilesRequest(::google::protobuf::Arena* arena);
  GetLogFilesRequest(::google::protobuf::Arena* arena, const GetLogFilesRequest& from);
  GetLogFilesRequest(::google::protobuf::Arena* arena, GetLogFilesRequest&& from) noexcept
      : GetLogFilesRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kLogNumberFieldNumber = 1,
  };
  // repeated int64 log_number = 1;
  int log_number_size() const;
  private:
  int _internal_log_number_size() const;

  public:
  void clear_log_number() ;
  ::int64_t log_number(int index) const;
  void set_log_number(int index, ::int64_t value);
  void add_log_number(::int64_t value);
  const ::google::protobuf::RepeatedField<::int64_t>& log_number() const;
  ::google::protobuf::RepeatedField<::int64_t>* mutable_log_number();

  private:
  const ::google::protobuf::RepeatedField<::int64_t>& _internal_log_number() const;
  ::google::protobuf::RepeatedField<::int64_t>* _internal_mutable_log_number();

  public:
  // @@protoc_insertion_point(class_scope:recovery.GetLogFilesRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedField<::int64_t> log_number_;
    mutable ::google::protobuf::internal::CachedSize _log_number_cached_byte_size_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_recovery_2eproto;
};
// -------------------------------------------------------------------

class FileChunk final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:recovery.FileChunk) */ {
 public:
  inline FileChunk() : FileChunk(nullptr) {}
  ~FileChunk() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR FileChunk(
      ::google::protobuf::internal::ConstantInitialized);

  inline FileChunk(const FileChunk& from) : FileChunk(nullptr, from) {}
  inline FileChunk(FileChunk&& from) noexcept
      : FileChunk(nullptr, std::move(from)) {}
  inline FileChunk& operator=(const FileChunk& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileChunk& operator=(FileChunk&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FileChunk& default_instance() {
    return *internal_default_instance();
  }
  static inline const FileChunk* internal_default_instance() {
    return reinterpret_cast<const FileChunk*>(
        &_FileChunk_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 7;
  friend void swap(FileChunk& a, FileChunk& b) { a.Swap(&b); }
  inline void Swap(FileChunk* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileChunk* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FileChunk* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<FileChunk>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const FileChunk& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const FileChunk& from) { FileChunk::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(FileChunk* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "recovery.FileChunk"; }

 protected:
  explicit FileChunk(::google::protobuf::Arena* arena);
  FileChunk(::google::protobuf::Arena* arena, const FileChunk& from);
  FileChunk(::google::protobuf::Arena* arena, FileChunk&& from) noexcept
      : FileChunk(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kContentFieldNumber = 1,
    kFilenameFieldNumber = 3,
    kStartingRangeFieldNumber = 5,
    kIsFinalChunkFieldNumber = 2,
    kTabletIdFieldNumber = 4,
  };
  // bytes content = 1;
  void clear_content() ;
  const std::string& content() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_content(Arg_&& arg, Args_... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* value);

  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(
      const std::string& value);
  std::string* _internal_mutable_content();

  public:
  // string filename = 3;
  void clear_filename() ;
  const std::string& filename() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_filename(Arg_&& arg, Args_... args);
  std::string* mutable_filename();
  PROTOBUF_NODISCARD std::string* release_filename();
  void set_allocated_filename(std::string* value);

  private:
  const std::string& _internal_filename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_filename(
      const std::string& value);
  std::string* _internal_mutable_filename();

  public:
  // string starting_range = 5;
  void clear_starting_range() ;
  const std::string& starting_range() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_starting_range(Arg_&& arg, Args_... args);
  std::string* mutable_starting_range();
  PROTOBUF_NODISCARD std::string* release_starting_range();
  void set_allocated_starting_range(std::string* value);

  private:
  const std::string& _internal_starting_range() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_starting_range(
      const std::string& value);
  std::string* _internal_mutable_starting_range();

  public:
  // bool is_final_chunk = 2;
  void clear_is_final_chunk() ;
  bool is_final_chunk() const;
  void set_is_final_chunk(bool value);

  private:
  bool _internal_is_final_chunk() const;
  void _internal_set_is_final_chunk(bool value);

  public:
  // int32 tablet_id = 4;
  void clear_tablet_id() ;
  ::int32_t tablet_id() const;
  void set_tablet_id(::int32_t value);

  private:
  ::int32_t _internal_tablet_id() const;
  void _internal_set_tablet_id(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:recovery.FileChunk)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 0,
      49, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr content_;
    ::google::protobuf::internal::ArenaStringPtr filename_;
    ::google::protobuf::internal::ArenaStringPtr starting_range_;
    bool is_final_chunk_;
    ::int32_t tablet_id_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_recovery_2eproto;
};
// -------------------------------------------------------------------

class CheckpointFilesResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:recovery.CheckpointFilesResponse) */ {
 public:
  inline CheckpointFilesResponse() : CheckpointFilesResponse(nullptr) {}
  ~CheckpointFilesResponse() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CheckpointFilesResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline CheckpointFilesResponse(const CheckpointFilesResponse& from) : CheckpointFilesResponse(nullptr, from) {}
  inline CheckpointFilesResponse(CheckpointFilesResponse&& from) noexcept
      : CheckpointFilesResponse(nullptr, std::move(from)) {}
  inline CheckpointFilesResponse& operator=(const CheckpointFilesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CheckpointFilesResponse& operator=(CheckpointFilesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CheckpointFilesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CheckpointFilesResponse* internal_default_instance() {
    return reinterpret_cast<const CheckpointFilesResponse*>(
        &_CheckpointFilesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(CheckpointFilesResponse& a, CheckpointFilesResponse& b) { a.Swap(&b); }
  inline void Swap(CheckpointFilesResponse* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CheckpointFilesResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CheckpointFilesResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<CheckpointFilesResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CheckpointFilesResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const CheckpointFilesResponse& from) { CheckpointFilesResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(CheckpointFilesResponse* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "recovery.CheckpointFilesResponse"; }

 protected:
  explicit CheckpointFilesResponse(::google::protobuf::Arena* arena);
  CheckpointFilesResponse(::google::protobuf::Arena* arena, const CheckpointFilesResponse& from);
  CheckpointFilesResponse(::google::protobuf::Arena* arena, CheckpointFilesResponse&& from) noexcept
      : CheckpointFilesResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kAckFieldNumber = 1,
  };
  // bool ack = 1;
  void clear_ack() ;
  bool ack() const;
  void set_ack(bool value);

  private:
  bool _internal_ack() const;
  void _internal_set_ack(bool value);

  public:
  // @@protoc_insertion_point(class_scope:recovery.CheckpointFilesResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    bool ack_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_recovery_2eproto;
};
// -------------------------------------------------------------------

class CheckpointFilesRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:recovery.CheckpointFilesRequest) */ {
 public:
  inline CheckpointFilesRequest() : CheckpointFilesRequest(nullptr) {}
  ~CheckpointFilesRequest() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CheckpointFilesRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline CheckpointFilesRequest(const CheckpointFilesRequest& from) : CheckpointFilesRequest(nullptr, from) {}
  inline CheckpointFilesRequest(CheckpointFilesRequest&& from) noexcept
      : CheckpointFilesRequest(nullptr, std::move(from)) {}
  inline CheckpointFilesRequest& operator=(const CheckpointFilesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CheckpointFilesRequest& operator=(CheckpointFilesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CheckpointFilesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CheckpointFilesRequest* internal_default_instance() {
    return reinterpret_cast<const CheckpointFilesRequest*>(
        &_CheckpointFilesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(CheckpointFilesRequest& a, CheckpointFilesRequest& b) { a.Swap(&b); }
  inline void Swap(CheckpointFilesRequest* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CheckpointFilesRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CheckpointFilesRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<CheckpointFilesRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CheckpointFilesRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const CheckpointFilesRequest& from) { CheckpointFilesRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(CheckpointFilesRequest* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "recovery.CheckpointFilesRequest"; }

 protected:
  explicit CheckpointFilesRequest(::google::protobuf::Arena* arena);
  CheckpointFilesRequest(::google::protobuf::Arena* arena, const CheckpointFilesRequest& from);
  CheckpointFilesRequest(::google::protobuf::Arena* arena, CheckpointFilesRequest&& from) noexcept
      : CheckpointFilesRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kAddressFieldNumber = 1,
  };
  // string address = 1;
  void clear_address() ;
  const std::string& address() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_address(Arg_&& arg, Args_... args);
  std::string* mutable_address();
  PROTOBUF_NODISCARD std::string* release_address();
  void set_allocated_address(std::string* value);

  private:
  const std::string& _internal_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address(
      const std::string& value);
  std::string* _internal_mutable_address();

  public:
  // @@protoc_insertion_point(class_scope:recovery.CheckpointFilesRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      47, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr address_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_recovery_2eproto;
};
// -------------------------------------------------------------------

class CheckpointChunkResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:recovery.CheckpointChunkResponse) */ {
 public:
  inline CheckpointChunkResponse() : CheckpointChunkResponse(nullptr) {}
  ~CheckpointChunkResponse() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CheckpointChunkResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline CheckpointChunkResponse(const CheckpointChunkResponse& from) : CheckpointChunkResponse(nullptr, from) {}
  inline CheckpointChunkResponse(CheckpointChunkResponse&& from) noexcept
      : CheckpointChunkResponse(nullptr, std::move(from)) {}
  inline CheckpointChunkResponse& operator=(const CheckpointChunkResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CheckpointChunkResponse& operator=(CheckpointChunkResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CheckpointChunkResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CheckpointChunkResponse* internal_default_instance() {
    return reinterpret_cast<const CheckpointChunkResponse*>(
        &_CheckpointChunkResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 8;
  friend void swap(CheckpointChunkResponse& a, CheckpointChunkResponse& b) { a.Swap(&b); }
  inline void Swap(CheckpointChunkResponse* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CheckpointChunkResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CheckpointChunkResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<CheckpointChunkResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CheckpointChunkResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const CheckpointChunkResponse& from) { CheckpointChunkResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(CheckpointChunkResponse* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "recovery.CheckpointChunkResponse"; }

 protected:
  explicit CheckpointChunkResponse(::google::protobuf::Arena* arena);
  CheckpointChunkResponse(::google::protobuf::Arena* arena, const CheckpointChunkResponse& from);
  CheckpointChunkResponse(::google::protobuf::Arena* arena, CheckpointChunkResponse&& from) noexcept
      : CheckpointChunkResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kBytesReceivedFieldNumber = 1,
  };
  // int32 bytesReceived = 1;
  void clear_bytesreceived() ;
  ::int32_t bytesreceived() const;
  void set_bytesreceived(::int32_t value);

  private:
  ::int32_t _internal_bytesreceived() const;
  void _internal_set_bytesreceived(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:recovery.CheckpointChunkResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::int32_t bytesreceived_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_recovery_2eproto;
};
// -------------------------------------------------------------------

class LogFiles final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:recovery.LogFiles) */ {
 public:
  inline LogFiles() : LogFiles(nullptr) {}
  ~LogFiles() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR LogFiles(
      ::google::protobuf::internal::ConstantInitialized);

  inline LogFiles(const LogFiles& from) : LogFiles(nullptr, from) {}
  inline LogFiles(LogFiles&& from) noexcept
      : LogFiles(nullptr, std::move(from)) {}
  inline LogFiles& operator=(const LogFiles& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogFiles& operator=(LogFiles&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LogFiles& default_instance() {
    return *internal_default_instance();
  }
  static inline const LogFiles* internal_default_instance() {
    return reinterpret_cast<const LogFiles*>(
        &_LogFiles_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 6;
  friend void swap(LogFiles& a, LogFiles& b) { a.Swap(&b); }
  inline void Swap(LogFiles* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LogFiles* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LogFiles* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<LogFiles>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const LogFiles& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const LogFiles& from) { LogFiles::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(LogFiles* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "recovery.LogFiles"; }

 protected:
  explicit LogFiles(::google::protobuf::Arena* arena);
  LogFiles(::google::protobuf::Arena* arena, const LogFiles& from);
  LogFiles(::google::protobuf::Arena* arena, LogFiles&& from) noexcept
      : LogFiles(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kLogFilesFieldNumber = 1,
  };
  // repeated .recovery.Log_File log_files = 1;
  int log_files_size() const;
  private:
  int _internal_log_files_size() const;

  public:
  void clear_log_files() ;
  ::recovery::Log_File* mutable_log_files(int index);
  ::google::protobuf::RepeatedPtrField<::recovery::Log_File>* mutable_log_files();

  private:
  const ::google::protobuf::RepeatedPtrField<::recovery::Log_File>& _internal_log_files() const;
  ::google::protobuf::RepeatedPtrField<::recovery::Log_File>* _internal_mutable_log_files();
  public:
  const ::recovery::Log_File& log_files(int index) const;
  ::recovery::Log_File* add_log_files();
  const ::google::protobuf::RepeatedPtrField<::recovery::Log_File>& log_files() const;
  // @@protoc_insertion_point(class_scope:recovery.LogFiles)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField< ::recovery::Log_File > log_files_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_recovery_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// StartRecoveryRequest

// int64 checkpoint_version_number = 1;
inline void StartRecoveryRequest::clear_checkpoint_version_number() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.checkpoint_version_number_ = ::int64_t{0};
}
inline ::int64_t StartRecoveryRequest::checkpoint_version_number() const {
  // @@protoc_insertion_point(field_get:recovery.StartRecoveryRequest.checkpoint_version_number)
  return _internal_checkpoint_version_number();
}
inline void StartRecoveryRequest::set_checkpoint_version_number(::int64_t value) {
  _internal_set_checkpoint_version_number(value);
  // @@protoc_insertion_point(field_set:recovery.StartRecoveryRequest.checkpoint_version_number)
}
inline ::int64_t StartRecoveryRequest::_internal_checkpoint_version_number() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.checkpoint_version_number_;
}
inline void StartRecoveryRequest::_internal_set_checkpoint_version_number(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.checkpoint_version_number_ = value;
}

// repeated int64 log_number = 2;
inline int StartRecoveryRequest::_internal_log_number_size() const {
  return _internal_log_number().size();
}
inline int StartRecoveryRequest::log_number_size() const {
  return _internal_log_number_size();
}
inline void StartRecoveryRequest::clear_log_number() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.log_number_.Clear();
}
inline ::int64_t StartRecoveryRequest::log_number(int index) const {
  // @@protoc_insertion_point(field_get:recovery.StartRecoveryRequest.log_number)
  return _internal_log_number().Get(index);
}
inline void StartRecoveryRequest::set_log_number(int index, ::int64_t value) {
  _internal_mutable_log_number()->Set(index, value);
  // @@protoc_insertion_point(field_set:recovery.StartRecoveryRequest.log_number)
}
inline void StartRecoveryRequest::add_log_number(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_log_number()->Add(value);
  // @@protoc_insertion_point(field_add:recovery.StartRecoveryRequest.log_number)
}
inline const ::google::protobuf::RepeatedField<::int64_t>& StartRecoveryRequest::log_number() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:recovery.StartRecoveryRequest.log_number)
  return _internal_log_number();
}
inline ::google::protobuf::RepeatedField<::int64_t>* StartRecoveryRequest::mutable_log_number()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:recovery.StartRecoveryRequest.log_number)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_log_number();
}
inline const ::google::protobuf::RepeatedField<::int64_t>&
StartRecoveryRequest::_internal_log_number() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.log_number_;
}
inline ::google::protobuf::RepeatedField<::int64_t>* StartRecoveryRequest::_internal_mutable_log_number() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.log_number_;
}

// -------------------------------------------------------------------

// StartRecoveryResponse

// .recovery.RecoveryType type = 1;
inline void StartRecoveryResponse::clear_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.type_ = 0;
}
inline ::recovery::RecoveryType StartRecoveryResponse::type() const {
  // @@protoc_insertion_point(field_get:recovery.StartRecoveryResponse.type)
  return _internal_type();
}
inline void StartRecoveryResponse::set_type(::recovery::RecoveryType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:recovery.StartRecoveryResponse.type)
}
inline ::recovery::RecoveryType StartRecoveryResponse::_internal_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::recovery::RecoveryType>(_impl_.type_);
}
inline void StartRecoveryResponse::_internal_set_type(::recovery::RecoveryType value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.type_ = value;
}

// -------------------------------------------------------------------

// CheckpointFilesRequest

// string address = 1;
inline void CheckpointFilesRequest::clear_address() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.address_.ClearToEmpty();
}
inline const std::string& CheckpointFilesRequest::address() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:recovery.CheckpointFilesRequest.address)
  return _internal_address();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CheckpointFilesRequest::set_address(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.address_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:recovery.CheckpointFilesRequest.address)
}
inline std::string* CheckpointFilesRequest::mutable_address() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_address();
  // @@protoc_insertion_point(field_mutable:recovery.CheckpointFilesRequest.address)
  return _s;
}
inline const std::string& CheckpointFilesRequest::_internal_address() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.address_.Get();
}
inline void CheckpointFilesRequest::_internal_set_address(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.address_.Set(value, GetArena());
}
inline std::string* CheckpointFilesRequest::_internal_mutable_address() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.address_.Mutable( GetArena());
}
inline std::string* CheckpointFilesRequest::release_address() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:recovery.CheckpointFilesRequest.address)
  return _impl_.address_.Release();
}
inline void CheckpointFilesRequest::set_allocated_address(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.address_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.address_.IsDefault()) {
          _impl_.address_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:recovery.CheckpointFilesRequest.address)
}

// -------------------------------------------------------------------

// CheckpointFilesResponse

// bool ack = 1;
inline void CheckpointFilesResponse::clear_ack() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.ack_ = false;
}
inline bool CheckpointFilesResponse::ack() const {
  // @@protoc_insertion_point(field_get:recovery.CheckpointFilesResponse.ack)
  return _internal_ack();
}
inline void CheckpointFilesResponse::set_ack(bool value) {
  _internal_set_ack(value);
  // @@protoc_insertion_point(field_set:recovery.CheckpointFilesResponse.ack)
}
inline bool CheckpointFilesResponse::_internal_ack() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.ack_;
}
inline void CheckpointFilesResponse::_internal_set_ack(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.ack_ = value;
}

// -------------------------------------------------------------------

// GetLogFilesRequest

// repeated int64 log_number = 1;
inline int GetLogFilesRequest::_internal_log_number_size() const {
  return _internal_log_number().size();
}
inline int GetLogFilesRequest::log_number_size() const {
  return _internal_log_number_size();
}
inline void GetLogFilesRequest::clear_log_number() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.log_number_.Clear();
}
inline ::int64_t GetLogFilesRequest::log_number(int index) const {
  // @@protoc_insertion_point(field_get:recovery.GetLogFilesRequest.log_number)
  return _internal_log_number().Get(index);
}
inline void GetLogFilesRequest::set_log_number(int index, ::int64_t value) {
  _internal_mutable_log_number()->Set(index, value);
  // @@protoc_insertion_point(field_set:recovery.GetLogFilesRequest.log_number)
}
inline void GetLogFilesRequest::add_log_number(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_log_number()->Add(value);
  // @@protoc_insertion_point(field_add:recovery.GetLogFilesRequest.log_number)
}
inline const ::google::protobuf::RepeatedField<::int64_t>& GetLogFilesRequest::log_number() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:recovery.GetLogFilesRequest.log_number)
  return _internal_log_number();
}
inline ::google::protobuf::RepeatedField<::int64_t>* GetLogFilesRequest::mutable_log_number()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:recovery.GetLogFilesRequest.log_number)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_log_number();
}
inline const ::google::protobuf::RepeatedField<::int64_t>&
GetLogFilesRequest::_internal_log_number() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.log_number_;
}
inline ::google::protobuf::RepeatedField<::int64_t>* GetLogFilesRequest::_internal_mutable_log_number() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.log_number_;
}

// -------------------------------------------------------------------

// Log_File

// string content = 1;
inline void Log_File::clear_content() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.content_.ClearToEmpty();
}
inline const std::string& Log_File::content() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:recovery.Log_File.content)
  return _internal_content();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Log_File::set_content(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.content_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:recovery.Log_File.content)
}
inline std::string* Log_File::mutable_content() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:recovery.Log_File.content)
  return _s;
}
inline const std::string& Log_File::_internal_content() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.content_.Get();
}
inline void Log_File::_internal_set_content(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.content_.Set(value, GetArena());
}
inline std::string* Log_File::_internal_mutable_content() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.content_.Mutable( GetArena());
}
inline std::string* Log_File::release_content() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:recovery.Log_File.content)
  return _impl_.content_.Release();
}
inline void Log_File::set_allocated_content(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.content_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.content_.IsDefault()) {
          _impl_.content_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:recovery.Log_File.content)
}

// string file_name = 2;
inline void Log_File::clear_file_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.file_name_.ClearToEmpty();
}
inline const std::string& Log_File::file_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:recovery.Log_File.file_name)
  return _internal_file_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Log_File::set_file_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.file_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:recovery.Log_File.file_name)
}
inline std::string* Log_File::mutable_file_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_file_name();
  // @@protoc_insertion_point(field_mutable:recovery.Log_File.file_name)
  return _s;
}
inline const std::string& Log_File::_internal_file_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.file_name_.Get();
}
inline void Log_File::_internal_set_file_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.file_name_.Set(value, GetArena());
}
inline std::string* Log_File::_internal_mutable_file_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.file_name_.Mutable( GetArena());
}
inline std::string* Log_File::release_file_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:recovery.Log_File.file_name)
  return _impl_.file_name_.Release();
}
inline void Log_File::set_allocated_file_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.file_name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.file_name_.IsDefault()) {
          _impl_.file_name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:recovery.Log_File.file_name)
}

// -------------------------------------------------------------------

// LogFiles

// repeated .recovery.Log_File log_files = 1;
inline int LogFiles::_internal_log_files_size() const {
  return _internal_log_files().size();
}
inline int LogFiles::log_files_size() const {
  return _internal_log_files_size();
}
inline void LogFiles::clear_log_files() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.log_files_.Clear();
}
inline ::recovery::Log_File* LogFiles::mutable_log_files(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:recovery.LogFiles.log_files)
  return _internal_mutable_log_files()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::recovery::Log_File>* LogFiles::mutable_log_files()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:recovery.LogFiles.log_files)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_log_files();
}
inline const ::recovery::Log_File& LogFiles::log_files(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:recovery.LogFiles.log_files)
  return _internal_log_files().Get(index);
}
inline ::recovery::Log_File* LogFiles::add_log_files() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::recovery::Log_File* _add = _internal_mutable_log_files()->Add();
  // @@protoc_insertion_point(field_add:recovery.LogFiles.log_files)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::recovery::Log_File>& LogFiles::log_files() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:recovery.LogFiles.log_files)
  return _internal_log_files();
}
inline const ::google::protobuf::RepeatedPtrField<::recovery::Log_File>&
LogFiles::_internal_log_files() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.log_files_;
}
inline ::google::protobuf::RepeatedPtrField<::recovery::Log_File>*
LogFiles::_internal_mutable_log_files() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.log_files_;
}

// -------------------------------------------------------------------

// FileChunk

// bytes content = 1;
inline void FileChunk::clear_content() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.content_.ClearToEmpty();
}
inline const std::string& FileChunk::content() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:recovery.FileChunk.content)
  return _internal_content();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FileChunk::set_content(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.content_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:recovery.FileChunk.content)
}
inline std::string* FileChunk::mutable_content() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:recovery.FileChunk.content)
  return _s;
}
inline const std::string& FileChunk::_internal_content() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.content_.Get();
}
inline void FileChunk::_internal_set_content(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.content_.Set(value, GetArena());
}
inline std::string* FileChunk::_internal_mutable_content() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.content_.Mutable( GetArena());
}
inline std::string* FileChunk::release_content() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:recovery.FileChunk.content)
  return _impl_.content_.Release();
}
inline void FileChunk::set_allocated_content(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.content_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.content_.IsDefault()) {
          _impl_.content_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:recovery.FileChunk.content)
}

// bool is_final_chunk = 2;
inline void FileChunk::clear_is_final_chunk() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.is_final_chunk_ = false;
}
inline bool FileChunk::is_final_chunk() const {
  // @@protoc_insertion_point(field_get:recovery.FileChunk.is_final_chunk)
  return _internal_is_final_chunk();
}
inline void FileChunk::set_is_final_chunk(bool value) {
  _internal_set_is_final_chunk(value);
  // @@protoc_insertion_point(field_set:recovery.FileChunk.is_final_chunk)
}
inline bool FileChunk::_internal_is_final_chunk() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.is_final_chunk_;
}
inline void FileChunk::_internal_set_is_final_chunk(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.is_final_chunk_ = value;
}

// string filename = 3;
inline void FileChunk::clear_filename() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.filename_.ClearToEmpty();
}
inline const std::string& FileChunk::filename() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:recovery.FileChunk.filename)
  return _internal_filename();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FileChunk::set_filename(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.filename_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:recovery.FileChunk.filename)
}
inline std::string* FileChunk::mutable_filename() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_filename();
  // @@protoc_insertion_point(field_mutable:recovery.FileChunk.filename)
  return _s;
}
inline const std::string& FileChunk::_internal_filename() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.filename_.Get();
}
inline void FileChunk::_internal_set_filename(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.filename_.Set(value, GetArena());
}
inline std::string* FileChunk::_internal_mutable_filename() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.filename_.Mutable( GetArena());
}
inline std::string* FileChunk::release_filename() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:recovery.FileChunk.filename)
  return _impl_.filename_.Release();
}
inline void FileChunk::set_allocated_filename(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.filename_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.filename_.IsDefault()) {
          _impl_.filename_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:recovery.FileChunk.filename)
}

// int32 tablet_id = 4;
inline void FileChunk::clear_tablet_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.tablet_id_ = 0;
}
inline ::int32_t FileChunk::tablet_id() const {
  // @@protoc_insertion_point(field_get:recovery.FileChunk.tablet_id)
  return _internal_tablet_id();
}
inline void FileChunk::set_tablet_id(::int32_t value) {
  _internal_set_tablet_id(value);
  // @@protoc_insertion_point(field_set:recovery.FileChunk.tablet_id)
}
inline ::int32_t FileChunk::_internal_tablet_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.tablet_id_;
}
inline void FileChunk::_internal_set_tablet_id(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.tablet_id_ = value;
}

// string starting_range = 5;
inline void FileChunk::clear_starting_range() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.starting_range_.ClearToEmpty();
}
inline const std::string& FileChunk::starting_range() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:recovery.FileChunk.starting_range)
  return _internal_starting_range();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FileChunk::set_starting_range(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.starting_range_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:recovery.FileChunk.starting_range)
}
inline std::string* FileChunk::mutable_starting_range() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_starting_range();
  // @@protoc_insertion_point(field_mutable:recovery.FileChunk.starting_range)
  return _s;
}
inline const std::string& FileChunk::_internal_starting_range() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.starting_range_.Get();
}
inline void FileChunk::_internal_set_starting_range(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.starting_range_.Set(value, GetArena());
}
inline std::string* FileChunk::_internal_mutable_starting_range() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.starting_range_.Mutable( GetArena());
}
inline std::string* FileChunk::release_starting_range() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:recovery.FileChunk.starting_range)
  return _impl_.starting_range_.Release();
}
inline void FileChunk::set_allocated_starting_range(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.starting_range_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.starting_range_.IsDefault()) {
          _impl_.starting_range_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:recovery.FileChunk.starting_range)
}

// -------------------------------------------------------------------

// CheckpointChunkResponse

// int32 bytesReceived = 1;
inline void CheckpointChunkResponse::clear_bytesreceived() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.bytesreceived_ = 0;
}
inline ::int32_t CheckpointChunkResponse::bytesreceived() const {
  // @@protoc_insertion_point(field_get:recovery.CheckpointChunkResponse.bytesReceived)
  return _internal_bytesreceived();
}
inline void CheckpointChunkResponse::set_bytesreceived(::int32_t value) {
  _internal_set_bytesreceived(value);
  // @@protoc_insertion_point(field_set:recovery.CheckpointChunkResponse.bytesReceived)
}
inline ::int32_t CheckpointChunkResponse::_internal_bytesreceived() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.bytesreceived_;
}
inline void CheckpointChunkResponse::_internal_set_bytesreceived(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.bytesreceived_ = value;
}

// -------------------------------------------------------------------

// RecoveryCompleteRequest

// string address = 1;
inline void RecoveryCompleteRequest::clear_address() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.address_.ClearToEmpty();
}
inline const std::string& RecoveryCompleteRequest::address() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:recovery.RecoveryCompleteRequest.address)
  return _internal_address();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RecoveryCompleteRequest::set_address(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.address_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:recovery.RecoveryCompleteRequest.address)
}
inline std::string* RecoveryCompleteRequest::mutable_address() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_address();
  // @@protoc_insertion_point(field_mutable:recovery.RecoveryCompleteRequest.address)
  return _s;
}
inline const std::string& RecoveryCompleteRequest::_internal_address() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.address_.Get();
}
inline void RecoveryCompleteRequest::_internal_set_address(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.address_.Set(value, GetArena());
}
inline std::string* RecoveryCompleteRequest::_internal_mutable_address() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.address_.Mutable( GetArena());
}
inline std::string* RecoveryCompleteRequest::release_address() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:recovery.RecoveryCompleteRequest.address)
  return _impl_.address_.Release();
}
inline void RecoveryCompleteRequest::set_allocated_address(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.address_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.address_.IsDefault()) {
          _impl_.address_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:recovery.RecoveryCompleteRequest.address)
}

// -------------------------------------------------------------------

// RecoveryCompleteResponse

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace recovery


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::recovery::RecoveryType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::recovery::RecoveryType>() {
  return ::recovery::RecoveryType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_recovery_2eproto_2epb_2eh
