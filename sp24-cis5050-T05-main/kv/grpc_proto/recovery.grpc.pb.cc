// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: recovery.proto

#include "recovery.pb.h"
#include "recovery.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace recovery {

static const char* RecoveryService_method_names[] = {
  "/recovery.RecoveryService/StartRecovery",
  "/recovery.RecoveryService/GetLogFiles",
  "/recovery.RecoveryService/GetCheckpointFiles",
  "/recovery.RecoveryService/SendCheckpointChunk",
  "/recovery.RecoveryService/NotifyRecoveryComplete",
};

std::unique_ptr< RecoveryService::Stub> RecoveryService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< RecoveryService::Stub> stub(new RecoveryService::Stub(channel, options));
  return stub;
}

RecoveryService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_StartRecovery_(RecoveryService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetLogFiles_(RecoveryService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetCheckpointFiles_(RecoveryService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SendCheckpointChunk_(RecoveryService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_NotifyRecoveryComplete_(RecoveryService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status RecoveryService::Stub::StartRecovery(::grpc::ClientContext* context, const ::recovery::StartRecoveryRequest& request, ::recovery::StartRecoveryResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::recovery::StartRecoveryRequest, ::recovery::StartRecoveryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_StartRecovery_, context, request, response);
}

void RecoveryService::Stub::async::StartRecovery(::grpc::ClientContext* context, const ::recovery::StartRecoveryRequest* request, ::recovery::StartRecoveryResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::recovery::StartRecoveryRequest, ::recovery::StartRecoveryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StartRecovery_, context, request, response, std::move(f));
}

void RecoveryService::Stub::async::StartRecovery(::grpc::ClientContext* context, const ::recovery::StartRecoveryRequest* request, ::recovery::StartRecoveryResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StartRecovery_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::recovery::StartRecoveryResponse>* RecoveryService::Stub::PrepareAsyncStartRecoveryRaw(::grpc::ClientContext* context, const ::recovery::StartRecoveryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::recovery::StartRecoveryResponse, ::recovery::StartRecoveryRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_StartRecovery_, context, request);
}

::grpc::ClientAsyncResponseReader< ::recovery::StartRecoveryResponse>* RecoveryService::Stub::AsyncStartRecoveryRaw(::grpc::ClientContext* context, const ::recovery::StartRecoveryRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncStartRecoveryRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RecoveryService::Stub::GetLogFiles(::grpc::ClientContext* context, const ::recovery::GetLogFilesRequest& request, ::recovery::LogFiles* response) {
  return ::grpc::internal::BlockingUnaryCall< ::recovery::GetLogFilesRequest, ::recovery::LogFiles, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetLogFiles_, context, request, response);
}

void RecoveryService::Stub::async::GetLogFiles(::grpc::ClientContext* context, const ::recovery::GetLogFilesRequest* request, ::recovery::LogFiles* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::recovery::GetLogFilesRequest, ::recovery::LogFiles, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetLogFiles_, context, request, response, std::move(f));
}

void RecoveryService::Stub::async::GetLogFiles(::grpc::ClientContext* context, const ::recovery::GetLogFilesRequest* request, ::recovery::LogFiles* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetLogFiles_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::recovery::LogFiles>* RecoveryService::Stub::PrepareAsyncGetLogFilesRaw(::grpc::ClientContext* context, const ::recovery::GetLogFilesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::recovery::LogFiles, ::recovery::GetLogFilesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetLogFiles_, context, request);
}

::grpc::ClientAsyncResponseReader< ::recovery::LogFiles>* RecoveryService::Stub::AsyncGetLogFilesRaw(::grpc::ClientContext* context, const ::recovery::GetLogFilesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetLogFilesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RecoveryService::Stub::GetCheckpointFiles(::grpc::ClientContext* context, const ::recovery::CheckpointFilesRequest& request, ::recovery::CheckpointFilesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::recovery::CheckpointFilesRequest, ::recovery::CheckpointFilesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetCheckpointFiles_, context, request, response);
}

void RecoveryService::Stub::async::GetCheckpointFiles(::grpc::ClientContext* context, const ::recovery::CheckpointFilesRequest* request, ::recovery::CheckpointFilesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::recovery::CheckpointFilesRequest, ::recovery::CheckpointFilesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetCheckpointFiles_, context, request, response, std::move(f));
}

void RecoveryService::Stub::async::GetCheckpointFiles(::grpc::ClientContext* context, const ::recovery::CheckpointFilesRequest* request, ::recovery::CheckpointFilesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetCheckpointFiles_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::recovery::CheckpointFilesResponse>* RecoveryService::Stub::PrepareAsyncGetCheckpointFilesRaw(::grpc::ClientContext* context, const ::recovery::CheckpointFilesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::recovery::CheckpointFilesResponse, ::recovery::CheckpointFilesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetCheckpointFiles_, context, request);
}

::grpc::ClientAsyncResponseReader< ::recovery::CheckpointFilesResponse>* RecoveryService::Stub::AsyncGetCheckpointFilesRaw(::grpc::ClientContext* context, const ::recovery::CheckpointFilesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetCheckpointFilesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RecoveryService::Stub::SendCheckpointChunk(::grpc::ClientContext* context, const ::recovery::FileChunk& request, ::recovery::CheckpointChunkResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::recovery::FileChunk, ::recovery::CheckpointChunkResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SendCheckpointChunk_, context, request, response);
}

void RecoveryService::Stub::async::SendCheckpointChunk(::grpc::ClientContext* context, const ::recovery::FileChunk* request, ::recovery::CheckpointChunkResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::recovery::FileChunk, ::recovery::CheckpointChunkResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendCheckpointChunk_, context, request, response, std::move(f));
}

void RecoveryService::Stub::async::SendCheckpointChunk(::grpc::ClientContext* context, const ::recovery::FileChunk* request, ::recovery::CheckpointChunkResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendCheckpointChunk_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::recovery::CheckpointChunkResponse>* RecoveryService::Stub::PrepareAsyncSendCheckpointChunkRaw(::grpc::ClientContext* context, const ::recovery::FileChunk& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::recovery::CheckpointChunkResponse, ::recovery::FileChunk, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SendCheckpointChunk_, context, request);
}

::grpc::ClientAsyncResponseReader< ::recovery::CheckpointChunkResponse>* RecoveryService::Stub::AsyncSendCheckpointChunkRaw(::grpc::ClientContext* context, const ::recovery::FileChunk& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSendCheckpointChunkRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RecoveryService::Stub::NotifyRecoveryComplete(::grpc::ClientContext* context, const ::recovery::RecoveryCompleteRequest& request, ::recovery::RecoveryCompleteResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::recovery::RecoveryCompleteRequest, ::recovery::RecoveryCompleteResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_NotifyRecoveryComplete_, context, request, response);
}

void RecoveryService::Stub::async::NotifyRecoveryComplete(::grpc::ClientContext* context, const ::recovery::RecoveryCompleteRequest* request, ::recovery::RecoveryCompleteResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::recovery::RecoveryCompleteRequest, ::recovery::RecoveryCompleteResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_NotifyRecoveryComplete_, context, request, response, std::move(f));
}

void RecoveryService::Stub::async::NotifyRecoveryComplete(::grpc::ClientContext* context, const ::recovery::RecoveryCompleteRequest* request, ::recovery::RecoveryCompleteResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_NotifyRecoveryComplete_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::recovery::RecoveryCompleteResponse>* RecoveryService::Stub::PrepareAsyncNotifyRecoveryCompleteRaw(::grpc::ClientContext* context, const ::recovery::RecoveryCompleteRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::recovery::RecoveryCompleteResponse, ::recovery::RecoveryCompleteRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_NotifyRecoveryComplete_, context, request);
}

::grpc::ClientAsyncResponseReader< ::recovery::RecoveryCompleteResponse>* RecoveryService::Stub::AsyncNotifyRecoveryCompleteRaw(::grpc::ClientContext* context, const ::recovery::RecoveryCompleteRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncNotifyRecoveryCompleteRaw(context, request, cq);
  result->StartCall();
  return result;
}

RecoveryService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RecoveryService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RecoveryService::Service, ::recovery::StartRecoveryRequest, ::recovery::StartRecoveryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RecoveryService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::recovery::StartRecoveryRequest* req,
             ::recovery::StartRecoveryResponse* resp) {
               return service->StartRecovery(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RecoveryService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RecoveryService::Service, ::recovery::GetLogFilesRequest, ::recovery::LogFiles, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RecoveryService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::recovery::GetLogFilesRequest* req,
             ::recovery::LogFiles* resp) {
               return service->GetLogFiles(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RecoveryService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RecoveryService::Service, ::recovery::CheckpointFilesRequest, ::recovery::CheckpointFilesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RecoveryService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::recovery::CheckpointFilesRequest* req,
             ::recovery::CheckpointFilesResponse* resp) {
               return service->GetCheckpointFiles(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RecoveryService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RecoveryService::Service, ::recovery::FileChunk, ::recovery::CheckpointChunkResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RecoveryService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::recovery::FileChunk* req,
             ::recovery::CheckpointChunkResponse* resp) {
               return service->SendCheckpointChunk(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RecoveryService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RecoveryService::Service, ::recovery::RecoveryCompleteRequest, ::recovery::RecoveryCompleteResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RecoveryService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::recovery::RecoveryCompleteRequest* req,
             ::recovery::RecoveryCompleteResponse* resp) {
               return service->NotifyRecoveryComplete(ctx, req, resp);
             }, this)));
}

RecoveryService::Service::~Service() {
}

::grpc::Status RecoveryService::Service::StartRecovery(::grpc::ServerContext* context, const ::recovery::StartRecoveryRequest* request, ::recovery::StartRecoveryResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RecoveryService::Service::GetLogFiles(::grpc::ServerContext* context, const ::recovery::GetLogFilesRequest* request, ::recovery::LogFiles* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RecoveryService::Service::GetCheckpointFiles(::grpc::ServerContext* context, const ::recovery::CheckpointFilesRequest* request, ::recovery::CheckpointFilesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RecoveryService::Service::SendCheckpointChunk(::grpc::ServerContext* context, const ::recovery::FileChunk* request, ::recovery::CheckpointChunkResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RecoveryService::Service::NotifyRecoveryComplete(::grpc::ServerContext* context, const ::recovery::RecoveryCompleteRequest* request, ::recovery::RecoveryCompleteResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace recovery

