// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: kv_lifecycle.proto
#ifndef GRPC_kv_5flifecycle_2eproto__INCLUDED
#define GRPC_kv_5flifecycle_2eproto__INCLUDED

#include "kv_lifecycle.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace kvstore {

// The gRPC service definition for lifecycle management of KV nodes
class KVNodeLifecycle final {
 public:
  static constexpr char const* service_full_name() {
    return "kvstore.KVNodeLifecycle";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status Shutdown(::grpc::ClientContext* context, const ::kvstore::ShutdownRequest& request, ::kvstore::ShutdownResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kvstore::ShutdownResponse>> AsyncShutdown(::grpc::ClientContext* context, const ::kvstore::ShutdownRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kvstore::ShutdownResponse>>(AsyncShutdownRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kvstore::ShutdownResponse>> PrepareAsyncShutdown(::grpc::ClientContext* context, const ::kvstore::ShutdownRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kvstore::ShutdownResponse>>(PrepareAsyncShutdownRaw(context, request, cq));
    }
    virtual ::grpc::Status Restart(::grpc::ClientContext* context, const ::kvstore::RestartRequest& request, ::kvstore::RestartResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kvstore::RestartResponse>> AsyncRestart(::grpc::ClientContext* context, const ::kvstore::RestartRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kvstore::RestartResponse>>(AsyncRestartRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kvstore::RestartResponse>> PrepareAsyncRestart(::grpc::ClientContext* context, const ::kvstore::RestartRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kvstore::RestartResponse>>(PrepareAsyncRestartRaw(context, request, cq));
    }
    virtual ::grpc::Status CheckNodeHealth(::grpc::ClientContext* context, const ::kvstore::HealthCheckRequest& request, ::kvstore::HealthCheckResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kvstore::HealthCheckResponse>> AsyncCheckNodeHealth(::grpc::ClientContext* context, const ::kvstore::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kvstore::HealthCheckResponse>>(AsyncCheckNodeHealthRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kvstore::HealthCheckResponse>> PrepareAsyncCheckNodeHealth(::grpc::ClientContext* context, const ::kvstore::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kvstore::HealthCheckResponse>>(PrepareAsyncCheckNodeHealthRaw(context, request, cq));
    }
    virtual ::grpc::Status SetPrimary(::grpc::ClientContext* context, const ::kvstore::SetPrimaryRequest& request, ::kvstore::SetPrimaryResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kvstore::SetPrimaryResponse>> AsyncSetPrimary(::grpc::ClientContext* context, const ::kvstore::SetPrimaryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kvstore::SetPrimaryResponse>>(AsyncSetPrimaryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kvstore::SetPrimaryResponse>> PrepareAsyncSetPrimary(::grpc::ClientContext* context, const ::kvstore::SetPrimaryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kvstore::SetPrimaryResponse>>(PrepareAsyncSetPrimaryRaw(context, request, cq));
    }
    virtual ::grpc::Status ActiveNodes(::grpc::ClientContext* context, const ::kvstore::ActiveNodesRequest& request, ::kvstore::ActiveNodesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kvstore::ActiveNodesResponse>> AsyncActiveNodes(::grpc::ClientContext* context, const ::kvstore::ActiveNodesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kvstore::ActiveNodesResponse>>(AsyncActiveNodesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kvstore::ActiveNodesResponse>> PrepareAsyncActiveNodes(::grpc::ClientContext* context, const ::kvstore::ActiveNodesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kvstore::ActiveNodesResponse>>(PrepareAsyncActiveNodesRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void Shutdown(::grpc::ClientContext* context, const ::kvstore::ShutdownRequest* request, ::kvstore::ShutdownResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Shutdown(::grpc::ClientContext* context, const ::kvstore::ShutdownRequest* request, ::kvstore::ShutdownResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Restart(::grpc::ClientContext* context, const ::kvstore::RestartRequest* request, ::kvstore::RestartResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Restart(::grpc::ClientContext* context, const ::kvstore::RestartRequest* request, ::kvstore::RestartResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void CheckNodeHealth(::grpc::ClientContext* context, const ::kvstore::HealthCheckRequest* request, ::kvstore::HealthCheckResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CheckNodeHealth(::grpc::ClientContext* context, const ::kvstore::HealthCheckRequest* request, ::kvstore::HealthCheckResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void SetPrimary(::grpc::ClientContext* context, const ::kvstore::SetPrimaryRequest* request, ::kvstore::SetPrimaryResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetPrimary(::grpc::ClientContext* context, const ::kvstore::SetPrimaryRequest* request, ::kvstore::SetPrimaryResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ActiveNodes(::grpc::ClientContext* context, const ::kvstore::ActiveNodesRequest* request, ::kvstore::ActiveNodesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ActiveNodes(::grpc::ClientContext* context, const ::kvstore::ActiveNodesRequest* request, ::kvstore::ActiveNodesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::kvstore::ShutdownResponse>* AsyncShutdownRaw(::grpc::ClientContext* context, const ::kvstore::ShutdownRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::kvstore::ShutdownResponse>* PrepareAsyncShutdownRaw(::grpc::ClientContext* context, const ::kvstore::ShutdownRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::kvstore::RestartResponse>* AsyncRestartRaw(::grpc::ClientContext* context, const ::kvstore::RestartRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::kvstore::RestartResponse>* PrepareAsyncRestartRaw(::grpc::ClientContext* context, const ::kvstore::RestartRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::kvstore::HealthCheckResponse>* AsyncCheckNodeHealthRaw(::grpc::ClientContext* context, const ::kvstore::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::kvstore::HealthCheckResponse>* PrepareAsyncCheckNodeHealthRaw(::grpc::ClientContext* context, const ::kvstore::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::kvstore::SetPrimaryResponse>* AsyncSetPrimaryRaw(::grpc::ClientContext* context, const ::kvstore::SetPrimaryRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::kvstore::SetPrimaryResponse>* PrepareAsyncSetPrimaryRaw(::grpc::ClientContext* context, const ::kvstore::SetPrimaryRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::kvstore::ActiveNodesResponse>* AsyncActiveNodesRaw(::grpc::ClientContext* context, const ::kvstore::ActiveNodesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::kvstore::ActiveNodesResponse>* PrepareAsyncActiveNodesRaw(::grpc::ClientContext* context, const ::kvstore::ActiveNodesRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status Shutdown(::grpc::ClientContext* context, const ::kvstore::ShutdownRequest& request, ::kvstore::ShutdownResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kvstore::ShutdownResponse>> AsyncShutdown(::grpc::ClientContext* context, const ::kvstore::ShutdownRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kvstore::ShutdownResponse>>(AsyncShutdownRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kvstore::ShutdownResponse>> PrepareAsyncShutdown(::grpc::ClientContext* context, const ::kvstore::ShutdownRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kvstore::ShutdownResponse>>(PrepareAsyncShutdownRaw(context, request, cq));
    }
    ::grpc::Status Restart(::grpc::ClientContext* context, const ::kvstore::RestartRequest& request, ::kvstore::RestartResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kvstore::RestartResponse>> AsyncRestart(::grpc::ClientContext* context, const ::kvstore::RestartRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kvstore::RestartResponse>>(AsyncRestartRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kvstore::RestartResponse>> PrepareAsyncRestart(::grpc::ClientContext* context, const ::kvstore::RestartRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kvstore::RestartResponse>>(PrepareAsyncRestartRaw(context, request, cq));
    }
    ::grpc::Status CheckNodeHealth(::grpc::ClientContext* context, const ::kvstore::HealthCheckRequest& request, ::kvstore::HealthCheckResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kvstore::HealthCheckResponse>> AsyncCheckNodeHealth(::grpc::ClientContext* context, const ::kvstore::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kvstore::HealthCheckResponse>>(AsyncCheckNodeHealthRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kvstore::HealthCheckResponse>> PrepareAsyncCheckNodeHealth(::grpc::ClientContext* context, const ::kvstore::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kvstore::HealthCheckResponse>>(PrepareAsyncCheckNodeHealthRaw(context, request, cq));
    }
    ::grpc::Status SetPrimary(::grpc::ClientContext* context, const ::kvstore::SetPrimaryRequest& request, ::kvstore::SetPrimaryResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kvstore::SetPrimaryResponse>> AsyncSetPrimary(::grpc::ClientContext* context, const ::kvstore::SetPrimaryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kvstore::SetPrimaryResponse>>(AsyncSetPrimaryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kvstore::SetPrimaryResponse>> PrepareAsyncSetPrimary(::grpc::ClientContext* context, const ::kvstore::SetPrimaryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kvstore::SetPrimaryResponse>>(PrepareAsyncSetPrimaryRaw(context, request, cq));
    }
    ::grpc::Status ActiveNodes(::grpc::ClientContext* context, const ::kvstore::ActiveNodesRequest& request, ::kvstore::ActiveNodesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kvstore::ActiveNodesResponse>> AsyncActiveNodes(::grpc::ClientContext* context, const ::kvstore::ActiveNodesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kvstore::ActiveNodesResponse>>(AsyncActiveNodesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kvstore::ActiveNodesResponse>> PrepareAsyncActiveNodes(::grpc::ClientContext* context, const ::kvstore::ActiveNodesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kvstore::ActiveNodesResponse>>(PrepareAsyncActiveNodesRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void Shutdown(::grpc::ClientContext* context, const ::kvstore::ShutdownRequest* request, ::kvstore::ShutdownResponse* response, std::function<void(::grpc::Status)>) override;
      void Shutdown(::grpc::ClientContext* context, const ::kvstore::ShutdownRequest* request, ::kvstore::ShutdownResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Restart(::grpc::ClientContext* context, const ::kvstore::RestartRequest* request, ::kvstore::RestartResponse* response, std::function<void(::grpc::Status)>) override;
      void Restart(::grpc::ClientContext* context, const ::kvstore::RestartRequest* request, ::kvstore::RestartResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CheckNodeHealth(::grpc::ClientContext* context, const ::kvstore::HealthCheckRequest* request, ::kvstore::HealthCheckResponse* response, std::function<void(::grpc::Status)>) override;
      void CheckNodeHealth(::grpc::ClientContext* context, const ::kvstore::HealthCheckRequest* request, ::kvstore::HealthCheckResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SetPrimary(::grpc::ClientContext* context, const ::kvstore::SetPrimaryRequest* request, ::kvstore::SetPrimaryResponse* response, std::function<void(::grpc::Status)>) override;
      void SetPrimary(::grpc::ClientContext* context, const ::kvstore::SetPrimaryRequest* request, ::kvstore::SetPrimaryResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ActiveNodes(::grpc::ClientContext* context, const ::kvstore::ActiveNodesRequest* request, ::kvstore::ActiveNodesResponse* response, std::function<void(::grpc::Status)>) override;
      void ActiveNodes(::grpc::ClientContext* context, const ::kvstore::ActiveNodesRequest* request, ::kvstore::ActiveNodesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::kvstore::ShutdownResponse>* AsyncShutdownRaw(::grpc::ClientContext* context, const ::kvstore::ShutdownRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::kvstore::ShutdownResponse>* PrepareAsyncShutdownRaw(::grpc::ClientContext* context, const ::kvstore::ShutdownRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::kvstore::RestartResponse>* AsyncRestartRaw(::grpc::ClientContext* context, const ::kvstore::RestartRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::kvstore::RestartResponse>* PrepareAsyncRestartRaw(::grpc::ClientContext* context, const ::kvstore::RestartRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::kvstore::HealthCheckResponse>* AsyncCheckNodeHealthRaw(::grpc::ClientContext* context, const ::kvstore::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::kvstore::HealthCheckResponse>* PrepareAsyncCheckNodeHealthRaw(::grpc::ClientContext* context, const ::kvstore::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::kvstore::SetPrimaryResponse>* AsyncSetPrimaryRaw(::grpc::ClientContext* context, const ::kvstore::SetPrimaryRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::kvstore::SetPrimaryResponse>* PrepareAsyncSetPrimaryRaw(::grpc::ClientContext* context, const ::kvstore::SetPrimaryRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::kvstore::ActiveNodesResponse>* AsyncActiveNodesRaw(::grpc::ClientContext* context, const ::kvstore::ActiveNodesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::kvstore::ActiveNodesResponse>* PrepareAsyncActiveNodesRaw(::grpc::ClientContext* context, const ::kvstore::ActiveNodesRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Shutdown_;
    const ::grpc::internal::RpcMethod rpcmethod_Restart_;
    const ::grpc::internal::RpcMethod rpcmethod_CheckNodeHealth_;
    const ::grpc::internal::RpcMethod rpcmethod_SetPrimary_;
    const ::grpc::internal::RpcMethod rpcmethod_ActiveNodes_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Shutdown(::grpc::ServerContext* context, const ::kvstore::ShutdownRequest* request, ::kvstore::ShutdownResponse* response);
    virtual ::grpc::Status Restart(::grpc::ServerContext* context, const ::kvstore::RestartRequest* request, ::kvstore::RestartResponse* response);
    virtual ::grpc::Status CheckNodeHealth(::grpc::ServerContext* context, const ::kvstore::HealthCheckRequest* request, ::kvstore::HealthCheckResponse* response);
    virtual ::grpc::Status SetPrimary(::grpc::ServerContext* context, const ::kvstore::SetPrimaryRequest* request, ::kvstore::SetPrimaryResponse* response);
    virtual ::grpc::Status ActiveNodes(::grpc::ServerContext* context, const ::kvstore::ActiveNodesRequest* request, ::kvstore::ActiveNodesResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Shutdown : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Shutdown() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Shutdown() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Shutdown(::grpc::ServerContext* /*context*/, const ::kvstore::ShutdownRequest* /*request*/, ::kvstore::ShutdownResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestShutdown(::grpc::ServerContext* context, ::kvstore::ShutdownRequest* request, ::grpc::ServerAsyncResponseWriter< ::kvstore::ShutdownResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Restart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Restart() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Restart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Restart(::grpc::ServerContext* /*context*/, const ::kvstore::RestartRequest* /*request*/, ::kvstore::RestartResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRestart(::grpc::ServerContext* context, ::kvstore::RestartRequest* request, ::grpc::ServerAsyncResponseWriter< ::kvstore::RestartResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CheckNodeHealth : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CheckNodeHealth() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_CheckNodeHealth() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckNodeHealth(::grpc::ServerContext* /*context*/, const ::kvstore::HealthCheckRequest* /*request*/, ::kvstore::HealthCheckResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCheckNodeHealth(::grpc::ServerContext* context, ::kvstore::HealthCheckRequest* request, ::grpc::ServerAsyncResponseWriter< ::kvstore::HealthCheckResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetPrimary : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetPrimary() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_SetPrimary() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetPrimary(::grpc::ServerContext* /*context*/, const ::kvstore::SetPrimaryRequest* /*request*/, ::kvstore::SetPrimaryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetPrimary(::grpc::ServerContext* context, ::kvstore::SetPrimaryRequest* request, ::grpc::ServerAsyncResponseWriter< ::kvstore::SetPrimaryResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ActiveNodes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ActiveNodes() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_ActiveNodes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ActiveNodes(::grpc::ServerContext* /*context*/, const ::kvstore::ActiveNodesRequest* /*request*/, ::kvstore::ActiveNodesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestActiveNodes(::grpc::ServerContext* context, ::kvstore::ActiveNodesRequest* request, ::grpc::ServerAsyncResponseWriter< ::kvstore::ActiveNodesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Shutdown<WithAsyncMethod_Restart<WithAsyncMethod_CheckNodeHealth<WithAsyncMethod_SetPrimary<WithAsyncMethod_ActiveNodes<Service > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_Shutdown : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Shutdown() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::kvstore::ShutdownRequest, ::kvstore::ShutdownResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::kvstore::ShutdownRequest* request, ::kvstore::ShutdownResponse* response) { return this->Shutdown(context, request, response); }));}
    void SetMessageAllocatorFor_Shutdown(
        ::grpc::MessageAllocator< ::kvstore::ShutdownRequest, ::kvstore::ShutdownResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::kvstore::ShutdownRequest, ::kvstore::ShutdownResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Shutdown() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Shutdown(::grpc::ServerContext* /*context*/, const ::kvstore::ShutdownRequest* /*request*/, ::kvstore::ShutdownResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Shutdown(
      ::grpc::CallbackServerContext* /*context*/, const ::kvstore::ShutdownRequest* /*request*/, ::kvstore::ShutdownResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Restart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Restart() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::kvstore::RestartRequest, ::kvstore::RestartResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::kvstore::RestartRequest* request, ::kvstore::RestartResponse* response) { return this->Restart(context, request, response); }));}
    void SetMessageAllocatorFor_Restart(
        ::grpc::MessageAllocator< ::kvstore::RestartRequest, ::kvstore::RestartResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::kvstore::RestartRequest, ::kvstore::RestartResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Restart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Restart(::grpc::ServerContext* /*context*/, const ::kvstore::RestartRequest* /*request*/, ::kvstore::RestartResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Restart(
      ::grpc::CallbackServerContext* /*context*/, const ::kvstore::RestartRequest* /*request*/, ::kvstore::RestartResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CheckNodeHealth : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CheckNodeHealth() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::kvstore::HealthCheckRequest, ::kvstore::HealthCheckResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::kvstore::HealthCheckRequest* request, ::kvstore::HealthCheckResponse* response) { return this->CheckNodeHealth(context, request, response); }));}
    void SetMessageAllocatorFor_CheckNodeHealth(
        ::grpc::MessageAllocator< ::kvstore::HealthCheckRequest, ::kvstore::HealthCheckResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::kvstore::HealthCheckRequest, ::kvstore::HealthCheckResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CheckNodeHealth() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckNodeHealth(::grpc::ServerContext* /*context*/, const ::kvstore::HealthCheckRequest* /*request*/, ::kvstore::HealthCheckResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CheckNodeHealth(
      ::grpc::CallbackServerContext* /*context*/, const ::kvstore::HealthCheckRequest* /*request*/, ::kvstore::HealthCheckResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SetPrimary : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SetPrimary() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::kvstore::SetPrimaryRequest, ::kvstore::SetPrimaryResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::kvstore::SetPrimaryRequest* request, ::kvstore::SetPrimaryResponse* response) { return this->SetPrimary(context, request, response); }));}
    void SetMessageAllocatorFor_SetPrimary(
        ::grpc::MessageAllocator< ::kvstore::SetPrimaryRequest, ::kvstore::SetPrimaryResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::kvstore::SetPrimaryRequest, ::kvstore::SetPrimaryResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SetPrimary() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetPrimary(::grpc::ServerContext* /*context*/, const ::kvstore::SetPrimaryRequest* /*request*/, ::kvstore::SetPrimaryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetPrimary(
      ::grpc::CallbackServerContext* /*context*/, const ::kvstore::SetPrimaryRequest* /*request*/, ::kvstore::SetPrimaryResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ActiveNodes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ActiveNodes() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::kvstore::ActiveNodesRequest, ::kvstore::ActiveNodesResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::kvstore::ActiveNodesRequest* request, ::kvstore::ActiveNodesResponse* response) { return this->ActiveNodes(context, request, response); }));}
    void SetMessageAllocatorFor_ActiveNodes(
        ::grpc::MessageAllocator< ::kvstore::ActiveNodesRequest, ::kvstore::ActiveNodesResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::kvstore::ActiveNodesRequest, ::kvstore::ActiveNodesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ActiveNodes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ActiveNodes(::grpc::ServerContext* /*context*/, const ::kvstore::ActiveNodesRequest* /*request*/, ::kvstore::ActiveNodesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ActiveNodes(
      ::grpc::CallbackServerContext* /*context*/, const ::kvstore::ActiveNodesRequest* /*request*/, ::kvstore::ActiveNodesResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_Shutdown<WithCallbackMethod_Restart<WithCallbackMethod_CheckNodeHealth<WithCallbackMethod_SetPrimary<WithCallbackMethod_ActiveNodes<Service > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Shutdown : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Shutdown() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Shutdown() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Shutdown(::grpc::ServerContext* /*context*/, const ::kvstore::ShutdownRequest* /*request*/, ::kvstore::ShutdownResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Restart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Restart() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Restart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Restart(::grpc::ServerContext* /*context*/, const ::kvstore::RestartRequest* /*request*/, ::kvstore::RestartResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CheckNodeHealth : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CheckNodeHealth() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_CheckNodeHealth() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckNodeHealth(::grpc::ServerContext* /*context*/, const ::kvstore::HealthCheckRequest* /*request*/, ::kvstore::HealthCheckResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetPrimary : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetPrimary() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_SetPrimary() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetPrimary(::grpc::ServerContext* /*context*/, const ::kvstore::SetPrimaryRequest* /*request*/, ::kvstore::SetPrimaryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ActiveNodes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ActiveNodes() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_ActiveNodes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ActiveNodes(::grpc::ServerContext* /*context*/, const ::kvstore::ActiveNodesRequest* /*request*/, ::kvstore::ActiveNodesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Shutdown : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Shutdown() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Shutdown() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Shutdown(::grpc::ServerContext* /*context*/, const ::kvstore::ShutdownRequest* /*request*/, ::kvstore::ShutdownResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestShutdown(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Restart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Restart() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Restart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Restart(::grpc::ServerContext* /*context*/, const ::kvstore::RestartRequest* /*request*/, ::kvstore::RestartResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRestart(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CheckNodeHealth : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CheckNodeHealth() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_CheckNodeHealth() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckNodeHealth(::grpc::ServerContext* /*context*/, const ::kvstore::HealthCheckRequest* /*request*/, ::kvstore::HealthCheckResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCheckNodeHealth(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetPrimary : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetPrimary() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_SetPrimary() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetPrimary(::grpc::ServerContext* /*context*/, const ::kvstore::SetPrimaryRequest* /*request*/, ::kvstore::SetPrimaryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetPrimary(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ActiveNodes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ActiveNodes() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_ActiveNodes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ActiveNodes(::grpc::ServerContext* /*context*/, const ::kvstore::ActiveNodesRequest* /*request*/, ::kvstore::ActiveNodesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestActiveNodes(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Shutdown : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Shutdown() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Shutdown(context, request, response); }));
    }
    ~WithRawCallbackMethod_Shutdown() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Shutdown(::grpc::ServerContext* /*context*/, const ::kvstore::ShutdownRequest* /*request*/, ::kvstore::ShutdownResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Shutdown(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Restart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Restart() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Restart(context, request, response); }));
    }
    ~WithRawCallbackMethod_Restart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Restart(::grpc::ServerContext* /*context*/, const ::kvstore::RestartRequest* /*request*/, ::kvstore::RestartResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Restart(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CheckNodeHealth : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CheckNodeHealth() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CheckNodeHealth(context, request, response); }));
    }
    ~WithRawCallbackMethod_CheckNodeHealth() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckNodeHealth(::grpc::ServerContext* /*context*/, const ::kvstore::HealthCheckRequest* /*request*/, ::kvstore::HealthCheckResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CheckNodeHealth(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SetPrimary : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SetPrimary() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetPrimary(context, request, response); }));
    }
    ~WithRawCallbackMethod_SetPrimary() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetPrimary(::grpc::ServerContext* /*context*/, const ::kvstore::SetPrimaryRequest* /*request*/, ::kvstore::SetPrimaryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetPrimary(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ActiveNodes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ActiveNodes() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ActiveNodes(context, request, response); }));
    }
    ~WithRawCallbackMethod_ActiveNodes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ActiveNodes(::grpc::ServerContext* /*context*/, const ::kvstore::ActiveNodesRequest* /*request*/, ::kvstore::ActiveNodesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ActiveNodes(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Shutdown : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Shutdown() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::kvstore::ShutdownRequest, ::kvstore::ShutdownResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::kvstore::ShutdownRequest, ::kvstore::ShutdownResponse>* streamer) {
                       return this->StreamedShutdown(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Shutdown() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Shutdown(::grpc::ServerContext* /*context*/, const ::kvstore::ShutdownRequest* /*request*/, ::kvstore::ShutdownResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedShutdown(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::kvstore::ShutdownRequest,::kvstore::ShutdownResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Restart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Restart() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::kvstore::RestartRequest, ::kvstore::RestartResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::kvstore::RestartRequest, ::kvstore::RestartResponse>* streamer) {
                       return this->StreamedRestart(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Restart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Restart(::grpc::ServerContext* /*context*/, const ::kvstore::RestartRequest* /*request*/, ::kvstore::RestartResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRestart(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::kvstore::RestartRequest,::kvstore::RestartResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CheckNodeHealth : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CheckNodeHealth() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::kvstore::HealthCheckRequest, ::kvstore::HealthCheckResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::kvstore::HealthCheckRequest, ::kvstore::HealthCheckResponse>* streamer) {
                       return this->StreamedCheckNodeHealth(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CheckNodeHealth() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CheckNodeHealth(::grpc::ServerContext* /*context*/, const ::kvstore::HealthCheckRequest* /*request*/, ::kvstore::HealthCheckResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCheckNodeHealth(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::kvstore::HealthCheckRequest,::kvstore::HealthCheckResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetPrimary : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetPrimary() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::kvstore::SetPrimaryRequest, ::kvstore::SetPrimaryResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::kvstore::SetPrimaryRequest, ::kvstore::SetPrimaryResponse>* streamer) {
                       return this->StreamedSetPrimary(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetPrimary() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetPrimary(::grpc::ServerContext* /*context*/, const ::kvstore::SetPrimaryRequest* /*request*/, ::kvstore::SetPrimaryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetPrimary(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::kvstore::SetPrimaryRequest,::kvstore::SetPrimaryResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ActiveNodes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ActiveNodes() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::kvstore::ActiveNodesRequest, ::kvstore::ActiveNodesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::kvstore::ActiveNodesRequest, ::kvstore::ActiveNodesResponse>* streamer) {
                       return this->StreamedActiveNodes(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ActiveNodes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ActiveNodes(::grpc::ServerContext* /*context*/, const ::kvstore::ActiveNodesRequest* /*request*/, ::kvstore::ActiveNodesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedActiveNodes(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::kvstore::ActiveNodesRequest,::kvstore::ActiveNodesResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Shutdown<WithStreamedUnaryMethod_Restart<WithStreamedUnaryMethod_CheckNodeHealth<WithStreamedUnaryMethod_SetPrimary<WithStreamedUnaryMethod_ActiveNodes<Service > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Shutdown<WithStreamedUnaryMethod_Restart<WithStreamedUnaryMethod_CheckNodeHealth<WithStreamedUnaryMethod_SetPrimary<WithStreamedUnaryMethod_ActiveNodes<Service > > > > > StreamedService;
};

}  // namespace kvstore


#endif  // GRPC_kv_5flifecycle_2eproto__INCLUDED
