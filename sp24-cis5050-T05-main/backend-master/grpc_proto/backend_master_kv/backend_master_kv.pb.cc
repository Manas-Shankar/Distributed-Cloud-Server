// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: backend_master_kv.proto
// Protobuf C++ Version: 5.26.1

#include "backend_master_kv.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace penncloud {
namespace backend {

inline constexpr LoadReport::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : nodeid_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        cpuusage_{0},
        memoryusage_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR LoadReport::LoadReport(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct LoadReportDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LoadReportDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~LoadReportDefaultTypeInternal() {}
  union {
    LoadReport _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LoadReportDefaultTypeInternal _LoadReport_default_instance_;

inline constexpr HealthCheckResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : ishealthy_{false},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR HealthCheckResponse::HealthCheckResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct HealthCheckResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HealthCheckResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~HealthCheckResponseDefaultTypeInternal() {}
  union {
    HealthCheckResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HealthCheckResponseDefaultTypeInternal _HealthCheckResponse_default_instance_;

inline constexpr HealthCheckRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : nodeid_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR HealthCheckRequest::HealthCheckRequest(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct HealthCheckRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HealthCheckRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~HealthCheckRequestDefaultTypeInternal() {}
  union {
    HealthCheckRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HealthCheckRequestDefaultTypeInternal _HealthCheckRequest_default_instance_;

inline constexpr Acknowledgment::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : message_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        success_{false},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Acknowledgment::Acknowledgment(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct AcknowledgmentDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AcknowledgmentDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AcknowledgmentDefaultTypeInternal() {}
  union {
    Acknowledgment _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AcknowledgmentDefaultTypeInternal _Acknowledgment_default_instance_;
}  // namespace backend
}  // namespace penncloud
static ::_pb::Metadata file_level_metadata_backend_5fmaster_5fkv_2eproto[4];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_backend_5fmaster_5fkv_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_backend_5fmaster_5fkv_2eproto = nullptr;
const ::uint32_t
    TableStruct_backend_5fmaster_5fkv_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::penncloud::backend::HealthCheckRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::penncloud::backend::HealthCheckRequest, _impl_.nodeid_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::penncloud::backend::HealthCheckResponse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::penncloud::backend::HealthCheckResponse, _impl_.ishealthy_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::penncloud::backend::LoadReport, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::penncloud::backend::LoadReport, _impl_.nodeid_),
        PROTOBUF_FIELD_OFFSET(::penncloud::backend::LoadReport, _impl_.cpuusage_),
        PROTOBUF_FIELD_OFFSET(::penncloud::backend::LoadReport, _impl_.memoryusage_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::penncloud::backend::Acknowledgment, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::penncloud::backend::Acknowledgment, _impl_.success_),
        PROTOBUF_FIELD_OFFSET(::penncloud::backend::Acknowledgment, _impl_.message_),
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::penncloud::backend::HealthCheckRequest)},
        {9, -1, -1, sizeof(::penncloud::backend::HealthCheckResponse)},
        {18, -1, -1, sizeof(::penncloud::backend::LoadReport)},
        {29, -1, -1, sizeof(::penncloud::backend::Acknowledgment)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::penncloud::backend::_HealthCheckRequest_default_instance_._instance,
    &::penncloud::backend::_HealthCheckResponse_default_instance_._instance,
    &::penncloud::backend::_LoadReport_default_instance_._instance,
    &::penncloud::backend::_Acknowledgment_default_instance_._instance,
};
const char descriptor_table_protodef_backend_5fmaster_5fkv_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\027backend_master_kv.proto\022\021penncloud.bac"
    "kend\"$\n\022HealthCheckRequest\022\016\n\006nodeId\030\001 \001"
    "(\t\"(\n\023HealthCheckResponse\022\021\n\tisHealthy\030\001"
    " \001(\010\"C\n\nLoadReport\022\016\n\006nodeId\030\001 \001(\t\022\020\n\010cp"
    "uUsage\030\002 \001(\001\022\023\n\013memoryUsage\030\003 \001(\001\"2\n\016Ack"
    "nowledgment\022\017\n\007success\030\001 \001(\010\022\017\n\007message\030"
    "\002 \001(\t2\322\001\n\026BackendMasterKVService\022b\n\017Chec"
    "kNodeHealth\022%.penncloud.backend.HealthCh"
    "eckRequest\032&.penncloud.backend.HealthChe"
    "ckResponse\"\000\022T\n\016ReportNodeLoad\022\035.pennclo"
    "ud.backend.LoadReport\032!.penncloud.backen"
    "d.Acknowledgment\"\000b\006proto3"
};
static ::absl::once_flag descriptor_table_backend_5fmaster_5fkv_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_backend_5fmaster_5fkv_2eproto = {
    false,
    false,
    466,
    descriptor_table_protodef_backend_5fmaster_5fkv_2eproto,
    "backend_master_kv.proto",
    &descriptor_table_backend_5fmaster_5fkv_2eproto_once,
    nullptr,
    0,
    4,
    schemas,
    file_default_instances,
    TableStruct_backend_5fmaster_5fkv_2eproto::offsets,
    file_level_metadata_backend_5fmaster_5fkv_2eproto,
    file_level_enum_descriptors_backend_5fmaster_5fkv_2eproto,
    file_level_service_descriptors_backend_5fmaster_5fkv_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_backend_5fmaster_5fkv_2eproto_getter() {
  return &descriptor_table_backend_5fmaster_5fkv_2eproto;
}
namespace penncloud {
namespace backend {
// ===================================================================

class HealthCheckRequest::_Internal {
 public:
};

HealthCheckRequest::HealthCheckRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:penncloud.backend.HealthCheckRequest)
}
inline PROTOBUF_NDEBUG_INLINE HealthCheckRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : nodeid_(arena, from.nodeid_),
        _cached_size_{0} {}

HealthCheckRequest::HealthCheckRequest(
    ::google::protobuf::Arena* arena,
    const HealthCheckRequest& from)
    : ::google::protobuf::Message(arena) {
  HealthCheckRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:penncloud.backend.HealthCheckRequest)
}
inline PROTOBUF_NDEBUG_INLINE HealthCheckRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : nodeid_(arena),
        _cached_size_{0} {}

inline void HealthCheckRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
HealthCheckRequest::~HealthCheckRequest() {
  // @@protoc_insertion_point(destructor:penncloud.backend.HealthCheckRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void HealthCheckRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.nodeid_.Destroy();
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
HealthCheckRequest::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              nullptr,  // OnDemandRegisterArenaDtor
              PROTOBUF_FIELD_OFFSET(HealthCheckRequest, _impl_._cached_size_),
              false,
          },
          &HealthCheckRequest::MergeImpl,
          &HealthCheckRequest::kDescriptorMethods,
      };
  return &_data_;
}
PROTOBUF_NOINLINE void HealthCheckRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:penncloud.backend.HealthCheckRequest)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.nodeid_.ClearToEmpty();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* HealthCheckRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 51, 2> HealthCheckRequest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_HealthCheckRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::penncloud::backend::HealthCheckRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string nodeId = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(HealthCheckRequest, _impl_.nodeid_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string nodeId = 1;
    {PROTOBUF_FIELD_OFFSET(HealthCheckRequest, _impl_.nodeid_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\44\6\0\0\0\0\0\0"
    "penncloud.backend.HealthCheckRequest"
    "nodeId"
  }},
};

::uint8_t* HealthCheckRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:penncloud.backend.HealthCheckRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string nodeId = 1;
  if (!this->_internal_nodeid().empty()) {
    const std::string& _s = this->_internal_nodeid();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "penncloud.backend.HealthCheckRequest.nodeId");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:penncloud.backend.HealthCheckRequest)
  return target;
}

::size_t HealthCheckRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:penncloud.backend.HealthCheckRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string nodeId = 1;
  if (!this->_internal_nodeid().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_nodeid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void HealthCheckRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<HealthCheckRequest*>(&to_msg);
  auto& from = static_cast<const HealthCheckRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:penncloud.backend.HealthCheckRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_nodeid().empty()) {
    _this->_internal_set_nodeid(from._internal_nodeid());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void HealthCheckRequest::CopyFrom(const HealthCheckRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:penncloud.backend.HealthCheckRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool HealthCheckRequest::IsInitialized() const {
  return true;
}

void HealthCheckRequest::InternalSwap(HealthCheckRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.nodeid_, &other->_impl_.nodeid_, arena);
}

::google::protobuf::Metadata HealthCheckRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(&descriptor_table_backend_5fmaster_5fkv_2eproto_getter,
                                   &descriptor_table_backend_5fmaster_5fkv_2eproto_once,
                                   file_level_metadata_backend_5fmaster_5fkv_2eproto[0]);
}
// ===================================================================

class HealthCheckResponse::_Internal {
 public:
};

HealthCheckResponse::HealthCheckResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:penncloud.backend.HealthCheckResponse)
}
HealthCheckResponse::HealthCheckResponse(
    ::google::protobuf::Arena* arena, const HealthCheckResponse& from)
    : HealthCheckResponse(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE HealthCheckResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void HealthCheckResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.ishealthy_ = {};
}
HealthCheckResponse::~HealthCheckResponse() {
  // @@protoc_insertion_point(destructor:penncloud.backend.HealthCheckResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void HealthCheckResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
HealthCheckResponse::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              nullptr,  // OnDemandRegisterArenaDtor
              PROTOBUF_FIELD_OFFSET(HealthCheckResponse, _impl_._cached_size_),
              false,
          },
          &HealthCheckResponse::MergeImpl,
          &HealthCheckResponse::kDescriptorMethods,
      };
  return &_data_;
}
PROTOBUF_NOINLINE void HealthCheckResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:penncloud.backend.HealthCheckResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ishealthy_ = false;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* HealthCheckResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> HealthCheckResponse::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_HealthCheckResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::penncloud::backend::HealthCheckResponse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // bool isHealthy = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(HealthCheckResponse, _impl_.ishealthy_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(HealthCheckResponse, _impl_.ishealthy_)}},
  }}, {{
    65535, 65535
  }}, {{
    // bool isHealthy = 1;
    {PROTOBUF_FIELD_OFFSET(HealthCheckResponse, _impl_.ishealthy_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* HealthCheckResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:penncloud.backend.HealthCheckResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // bool isHealthy = 1;
  if (this->_internal_ishealthy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_ishealthy(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:penncloud.backend.HealthCheckResponse)
  return target;
}

::size_t HealthCheckResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:penncloud.backend.HealthCheckResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool isHealthy = 1;
  if (this->_internal_ishealthy() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void HealthCheckResponse::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<HealthCheckResponse*>(&to_msg);
  auto& from = static_cast<const HealthCheckResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:penncloud.backend.HealthCheckResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_ishealthy() != 0) {
    _this->_impl_.ishealthy_ = from._impl_.ishealthy_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void HealthCheckResponse::CopyFrom(const HealthCheckResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:penncloud.backend.HealthCheckResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool HealthCheckResponse::IsInitialized() const {
  return true;
}

void HealthCheckResponse::InternalSwap(HealthCheckResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        swap(_impl_.ishealthy_, other->_impl_.ishealthy_);
}

::google::protobuf::Metadata HealthCheckResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(&descriptor_table_backend_5fmaster_5fkv_2eproto_getter,
                                   &descriptor_table_backend_5fmaster_5fkv_2eproto_once,
                                   file_level_metadata_backend_5fmaster_5fkv_2eproto[1]);
}
// ===================================================================

class LoadReport::_Internal {
 public:
};

LoadReport::LoadReport(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:penncloud.backend.LoadReport)
}
inline PROTOBUF_NDEBUG_INLINE LoadReport::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : nodeid_(arena, from.nodeid_),
        _cached_size_{0} {}

LoadReport::LoadReport(
    ::google::protobuf::Arena* arena,
    const LoadReport& from)
    : ::google::protobuf::Message(arena) {
  LoadReport* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, cpuusage_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, cpuusage_),
           offsetof(Impl_, memoryusage_) -
               offsetof(Impl_, cpuusage_) +
               sizeof(Impl_::memoryusage_));

  // @@protoc_insertion_point(copy_constructor:penncloud.backend.LoadReport)
}
inline PROTOBUF_NDEBUG_INLINE LoadReport::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : nodeid_(arena),
        _cached_size_{0} {}

inline void LoadReport::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, cpuusage_),
           0,
           offsetof(Impl_, memoryusage_) -
               offsetof(Impl_, cpuusage_) +
               sizeof(Impl_::memoryusage_));
}
LoadReport::~LoadReport() {
  // @@protoc_insertion_point(destructor:penncloud.backend.LoadReport)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void LoadReport::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.nodeid_.Destroy();
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
LoadReport::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              nullptr,  // OnDemandRegisterArenaDtor
              PROTOBUF_FIELD_OFFSET(LoadReport, _impl_._cached_size_),
              false,
          },
          &LoadReport::MergeImpl,
          &LoadReport::kDescriptorMethods,
      };
  return &_data_;
}
PROTOBUF_NOINLINE void LoadReport::Clear() {
// @@protoc_insertion_point(message_clear_start:penncloud.backend.LoadReport)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.nodeid_.ClearToEmpty();
  ::memset(&_impl_.cpuusage_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.memoryusage_) -
      reinterpret_cast<char*>(&_impl_.cpuusage_)) + sizeof(_impl_.memoryusage_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* LoadReport::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 43, 2> LoadReport::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_LoadReport_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::penncloud::backend::LoadReport>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string nodeId = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(LoadReport, _impl_.nodeid_)}},
    // double cpuUsage = 2;
    {::_pbi::TcParser::FastF64S1,
     {17, 63, 0, PROTOBUF_FIELD_OFFSET(LoadReport, _impl_.cpuusage_)}},
    // double memoryUsage = 3;
    {::_pbi::TcParser::FastF64S1,
     {25, 63, 0, PROTOBUF_FIELD_OFFSET(LoadReport, _impl_.memoryusage_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string nodeId = 1;
    {PROTOBUF_FIELD_OFFSET(LoadReport, _impl_.nodeid_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // double cpuUsage = 2;
    {PROTOBUF_FIELD_OFFSET(LoadReport, _impl_.cpuusage_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double memoryUsage = 3;
    {PROTOBUF_FIELD_OFFSET(LoadReport, _impl_.memoryusage_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
  }},
  // no aux_entries
  {{
    "\34\6\0\0\0\0\0\0"
    "penncloud.backend.LoadReport"
    "nodeId"
  }},
};

::uint8_t* LoadReport::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:penncloud.backend.LoadReport)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string nodeId = 1;
  if (!this->_internal_nodeid().empty()) {
    const std::string& _s = this->_internal_nodeid();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "penncloud.backend.LoadReport.nodeId");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // double cpuUsage = 2;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_cpuusage = this->_internal_cpuusage();
  ::uint64_t raw_cpuusage;
  memcpy(&raw_cpuusage, &tmp_cpuusage, sizeof(tmp_cpuusage));
  if (raw_cpuusage != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        2, this->_internal_cpuusage(), target);
  }

  // double memoryUsage = 3;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_memoryusage = this->_internal_memoryusage();
  ::uint64_t raw_memoryusage;
  memcpy(&raw_memoryusage, &tmp_memoryusage, sizeof(tmp_memoryusage));
  if (raw_memoryusage != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        3, this->_internal_memoryusage(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:penncloud.backend.LoadReport)
  return target;
}

::size_t LoadReport::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:penncloud.backend.LoadReport)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string nodeId = 1;
  if (!this->_internal_nodeid().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_nodeid());
  }

  // double cpuUsage = 2;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_cpuusage = this->_internal_cpuusage();
  ::uint64_t raw_cpuusage;
  memcpy(&raw_cpuusage, &tmp_cpuusage, sizeof(tmp_cpuusage));
  if (raw_cpuusage != 0) {
    total_size += 9;
  }

  // double memoryUsage = 3;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_memoryusage = this->_internal_memoryusage();
  ::uint64_t raw_memoryusage;
  memcpy(&raw_memoryusage, &tmp_memoryusage, sizeof(tmp_memoryusage));
  if (raw_memoryusage != 0) {
    total_size += 9;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void LoadReport::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<LoadReport*>(&to_msg);
  auto& from = static_cast<const LoadReport&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:penncloud.backend.LoadReport)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_nodeid().empty()) {
    _this->_internal_set_nodeid(from._internal_nodeid());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_cpuusage = from._internal_cpuusage();
  ::uint64_t raw_cpuusage;
  memcpy(&raw_cpuusage, &tmp_cpuusage, sizeof(tmp_cpuusage));
  if (raw_cpuusage != 0) {
    _this->_impl_.cpuusage_ = from._impl_.cpuusage_;
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_memoryusage = from._internal_memoryusage();
  ::uint64_t raw_memoryusage;
  memcpy(&raw_memoryusage, &tmp_memoryusage, sizeof(tmp_memoryusage));
  if (raw_memoryusage != 0) {
    _this->_impl_.memoryusage_ = from._impl_.memoryusage_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void LoadReport::CopyFrom(const LoadReport& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:penncloud.backend.LoadReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool LoadReport::IsInitialized() const {
  return true;
}

void LoadReport::InternalSwap(LoadReport* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.nodeid_, &other->_impl_.nodeid_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LoadReport, _impl_.memoryusage_)
      + sizeof(LoadReport::_impl_.memoryusage_)
      - PROTOBUF_FIELD_OFFSET(LoadReport, _impl_.cpuusage_)>(
          reinterpret_cast<char*>(&_impl_.cpuusage_),
          reinterpret_cast<char*>(&other->_impl_.cpuusage_));
}

::google::protobuf::Metadata LoadReport::GetMetadata() const {
  return ::_pbi::AssignDescriptors(&descriptor_table_backend_5fmaster_5fkv_2eproto_getter,
                                   &descriptor_table_backend_5fmaster_5fkv_2eproto_once,
                                   file_level_metadata_backend_5fmaster_5fkv_2eproto[2]);
}
// ===================================================================

class Acknowledgment::_Internal {
 public:
};

Acknowledgment::Acknowledgment(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:penncloud.backend.Acknowledgment)
}
inline PROTOBUF_NDEBUG_INLINE Acknowledgment::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : message_(arena, from.message_),
        _cached_size_{0} {}

Acknowledgment::Acknowledgment(
    ::google::protobuf::Arena* arena,
    const Acknowledgment& from)
    : ::google::protobuf::Message(arena) {
  Acknowledgment* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  _impl_.success_ = from._impl_.success_;

  // @@protoc_insertion_point(copy_constructor:penncloud.backend.Acknowledgment)
}
inline PROTOBUF_NDEBUG_INLINE Acknowledgment::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : message_(arena),
        _cached_size_{0} {}

inline void Acknowledgment::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.success_ = {};
}
Acknowledgment::~Acknowledgment() {
  // @@protoc_insertion_point(destructor:penncloud.backend.Acknowledgment)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Acknowledgment::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.message_.Destroy();
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
Acknowledgment::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              nullptr,  // OnDemandRegisterArenaDtor
              PROTOBUF_FIELD_OFFSET(Acknowledgment, _impl_._cached_size_),
              false,
          },
          &Acknowledgment::MergeImpl,
          &Acknowledgment::kDescriptorMethods,
      };
  return &_data_;
}
PROTOBUF_NOINLINE void Acknowledgment::Clear() {
// @@protoc_insertion_point(message_clear_start:penncloud.backend.Acknowledgment)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_.ClearToEmpty();
  _impl_.success_ = false;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Acknowledgment::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 48, 2> Acknowledgment::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_Acknowledgment_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::penncloud::backend::Acknowledgment>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string message = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(Acknowledgment, _impl_.message_)}},
    // bool success = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(Acknowledgment, _impl_.success_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(Acknowledgment, _impl_.success_)}},
  }}, {{
    65535, 65535
  }}, {{
    // bool success = 1;
    {PROTOBUF_FIELD_OFFSET(Acknowledgment, _impl_.success_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // string message = 2;
    {PROTOBUF_FIELD_OFFSET(Acknowledgment, _impl_.message_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\40\0\7\0\0\0\0\0"
    "penncloud.backend.Acknowledgment"
    "message"
  }},
};

::uint8_t* Acknowledgment::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:penncloud.backend.Acknowledgment)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_success(), target);
  }

  // string message = 2;
  if (!this->_internal_message().empty()) {
    const std::string& _s = this->_internal_message();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "penncloud.backend.Acknowledgment.message");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:penncloud.backend.Acknowledgment)
  return target;
}

::size_t Acknowledgment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:penncloud.backend.Acknowledgment)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 2;
  if (!this->_internal_message().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_message());
  }

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void Acknowledgment::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Acknowledgment*>(&to_msg);
  auto& from = static_cast<const Acknowledgment&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:penncloud.backend.Acknowledgment)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (from._internal_success() != 0) {
    _this->_impl_.success_ = from._impl_.success_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Acknowledgment::CopyFrom(const Acknowledgment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:penncloud.backend.Acknowledgment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Acknowledgment::IsInitialized() const {
  return true;
}

void Acknowledgment::InternalSwap(Acknowledgment* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.message_, &other->_impl_.message_, arena);
        swap(_impl_.success_, other->_impl_.success_);
}

::google::protobuf::Metadata Acknowledgment::GetMetadata() const {
  return ::_pbi::AssignDescriptors(&descriptor_table_backend_5fmaster_5fkv_2eproto_getter,
                                   &descriptor_table_backend_5fmaster_5fkv_2eproto_once,
                                   file_level_metadata_backend_5fmaster_5fkv_2eproto[3]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace backend
}  // namespace penncloud
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::std::false_type _static_init_ PROTOBUF_UNUSED =
    (::_pbi::AddDescriptors(&descriptor_table_backend_5fmaster_5fkv_2eproto),
     ::std::false_type{});
#include "google/protobuf/port_undef.inc"
